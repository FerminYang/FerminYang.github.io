<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>止觀</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.dongderu.net/"/>
  <updated>2016-11-15T08:45:08.267Z</updated>
  <id>http://blog.dongderu.net/</id>
  
  <author>
    <name>Fermin Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端框架v2.6</title>
    <link href="http://blog.dongderu.net/2016/09/12/2016-9-12-front-end-frameworks/"/>
    <id>http://blog.dongderu.net/2016/09/12/2016-9-12-front-end-frameworks/</id>
    <published>2016-09-12T02:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="">https://github.com/usablica/front-end-frameworks</a><br>最佳前端框架聚合，致力于高效和简易化的Web开发。<br>你可以在<a href="http://usablica.github.io/front-end-frameworks/compare.html" target="_blank" rel="external">这里</a>针对所有列出的前端框架进行比较。<br><img src="https://ooo.0o0.ooo/2016/10/18/58058d278e4ba.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;&quot;&gt;https://github.com/usablica/front-end-frameworks&lt;/a&gt;&lt;br&gt;最佳前端框架聚合，致力于高效和简易化的Web开发。&lt;br&gt;你可以在&lt;a href=&quot;http://usablica.github.i
    
    </summary>
    
      <category term="Resources" scheme="http://blog.dongderu.net/categories/Resources/"/>
    
    
      <category term="bookmark" scheme="http://blog.dongderu.net/tags/bookmark/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Docker + Git + FlowCI + Github Pages</title>
    <link href="http://blog.dongderu.net/2016/09/06/2016-9-6-hello-world/"/>
    <id>http://blog.dongderu.net/2016/09/06/2016-9-6-hello-world/</id>
    <published>2016-09-06T03:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>Just Amazing！</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="built_in">exec</span> -it [dockerName] hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<h3 id="Edit-with-your-favorite-Markdown-Editor"><a href="#Edit-with-your-favorite-Markdown-Editor" class="headerlink" title="Edit with your favorite Markdown Editor"></a>Edit with your favorite Markdown Editor</h3><p>Type Type…</p>
<h3 id="Commit-and-Push"><a href="#Commit-and-Push" class="headerlink" title="Commit and Push"></a>Commit and Push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit &amp;&amp; git push</div></pre></td></tr></table></figure>
<h3 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy"></a>Enjoy</h3><p><a href="https://ferminyang.github.io" target="_blank" rel="external">https://ferminyang.github.io</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just Amazing！&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a
    
    </summary>
    
      <category term="Diary" scheme="http://blog.dongderu.net/categories/Diary/"/>
    
    
      <category term="hexo" scheme="http://blog.dongderu.net/tags/hexo/"/>
    
      <category term="docker" scheme="http://blog.dongderu.net/tags/docker/"/>
    
      <category term="git" scheme="http://blog.dongderu.net/tags/git/"/>
    
      <category term="ci" scheme="http://blog.dongderu.net/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>基于SailsJS与Mysql的ORM事务操作以及数据复制</title>
    <link href="http://blog.dongderu.net/2016/01/07/2016-1-7-sails-mysql-transactions/"/>
    <id>http://blog.dongderu.net/2016/01/07/2016-1-7-sails-mysql-transactions/</id>
    <published>2016-01-07T05:02:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><p><a href="">https://github.com/postmanlabs/sails-mysql-transactions</a></p>
<p>##介绍<br><code>sails-mysql-transaction</code>是一个Sails.js与MySQL连接的ORM适配器，支持事务和集群复制。这个适配器基本上包含了流行的sails-mysql适配器，并提供额外的API来执行围绕数据库事务的操作。 它还提供以负载均衡的方式从一组只读副本中读取数据。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>在你的项目中的package.json文件中添加<code>sails-mysql-transactions</code>。不要在没有包含或安装sails的情况下直接执行install。</li>
<li>如已经安装了<code>sails-mysql</code>，那它可能会干扰这个组件。将其从package.json中移除然后执行<code>npm remove sails-mysql</code>进行卸载。</li>
<li>这个组件只有在sails已安装的前提下才可成功安装。如果此组件已正确安装，执行<code>npm install sails-mysql-transactions --save</code>或直接运行<code>npm install</code>，组件将会自动执行安装过程。</li>
</ol>
<h2 id="使用postinstall-script进行安全安装"><a href="#使用postinstall-script进行安全安装" class="headerlink" title="使用postinstall script进行安全安装"></a>使用postinstall script进行安全安装</h2><p>如果遇到<code>npm install</code>时由于安装顺序不稳定而导致问题，你可以将一下内容加入到<code>package.json</code>文件中，作为<a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external">postinstall script of npm</a>。这将确保此组件在sails已安装的前提下被安装。需要注意的是，你并不需要将<code>sails-mysql-transactions</code>作为一个依赖进行添加你的<code>package.json</code>文件中。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"postinstall"</span>: <span class="string">"npm install sails-mysql-transactions"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="安装备注："><a href="#安装备注：" class="headerlink" title="安装备注："></a>安装备注：</h3><p>此包将会重写sails内置的由Postman维护的waterline组件。所以如果你需要重新安装或更新sails时，本适配器也需要重装。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>一个Sails的集成测试应用在本项目的<code>tests/integration/app</code>目录下，里面包含完整功能，只需要执行在<code>test/integration/app</code>目录下执行<code>npm install</code>即可。</p>
<h2 id="Sails-config-local-js"><a href="#Sails-config-local-js" class="headerlink" title="Sails config/local.js"></a>Sails config/local.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">/* your other config stay as is */</span></div><div class="line"></div><div class="line">  connections: &#123;</div><div class="line">    <span class="attr">mySQLT</span>: &#123;</div><div class="line">      <span class="attr">adapter</span>: <span class="string">'sails-mysql-transactions'</span>,</div><div class="line">      <span class="attr">host</span>: <span class="string">'&#123;&#123;your-db-host&#125;&#125;'</span>,</div><div class="line">      <span class="attr">user</span>: <span class="string">'&#123;&#123;your-db-username&#125;&#125;'</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">'&#123;&#123;your-db-password&#125;&#125;'</span>,</div><div class="line">      <span class="attr">database</span>: <span class="string">'&#123;&#123;your-db-tablename&#125;&#125;'</span>,</div><div class="line"></div><div class="line">      <span class="attr">transactionConnectionLimit</span>: <span class="number">10</span>,</div><div class="line">      <span class="attr">rollbackTransactionOnError</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">queryCaseSensitive</span>: <span class="literal">false</span>,</div><div class="line"></div><div class="line">      <span class="comment">/* this section is needed only if replication feature is required */</span></div><div class="line">      replication: &#123;</div><div class="line">        <span class="attr">enabled</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">inheritMaster</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">canRetry</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">removeNodeErrorCount</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">restoreNodeTimeout</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>,</div><div class="line">        <span class="attr">defaultSelector</span>: <span class="string">'RR'</span>, <span class="comment">// 'RANDOM' or 'ORDER'</span></div><div class="line">        sources: &#123; </div><div class="line">          <span class="attr">readonly</span>: &#123;</div><div class="line">            <span class="attr">enabled</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">host</span>: <span class="string">'&#123;&#123;replica-1-host&#125;&#125;'</span>,</div><div class="line">            <span class="attr">user</span>: <span class="string">'&#123;&#123;replica-1-user&#125;&#125;'</span>,</div><div class="line">            <span class="attr">password</span>: <span class="string">'&#123;&#123;replica-1-password&#125;&#125;'</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">models</span>: &#123;</div><div class="line">    <span class="attr">connection</span>: <span class="string">'mySQLT'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在Controller中使用事务"><a href="#在Controller中使用事务" class="headerlink" title="在Controller中使用事务"></a>在Controller中使用事务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Transaction = <span class="built_in">require</span>(<span class="string">'sails-mysql-transactions'</span>).Transaction;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">create</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// start a new transaction</span></div><div class="line">    Transaction.start(<span class="function"><span class="keyword">function</span> (<span class="params">err, transaction</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// the first error might even fail to return a transaction object, so double-check.</span></div><div class="line">        transaction &amp;&amp; transaction.rollback();</div><div class="line">        <span class="keyword">return</span> res.serverError(err);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      OneModel.transact(transaction).create(req.params.all(), <span class="function"><span class="keyword">function</span> (<span class="params">err, modelInstance</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          transaction.rollback();</div><div class="line">          <span class="keyword">return</span> res.serverError(err);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// using transaction to update another model and using the promises architecture</span></div><div class="line">        AnotherModel.transact(transaction).findOne(req.param(<span class="string">'id'</span>)).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, anotherInstance</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (err) &#123;</div><div class="line">            transaction.rollback();</div><div class="line">            <span class="keyword">return</span> res.serverError(err);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// using update and association changes</span></div><div class="line">          modelInstance.someAssociatedModel.remove(req.param(<span class="string">'remove_id'</span>));</div><div class="line"></div><div class="line">          <span class="comment">// standard .save() works when in transaction</span></div><div class="line">          modelInstance.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, savedModel</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">              transaction.rollback();</div><div class="line">              <span class="keyword">return</span> res.serverError(err);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// finally commit the transaction before sending response</span></div><div class="line">            transaction.commit();</div><div class="line">            <span class="keyword">return</span> res.json(&#123;</div><div class="line">              <span class="attr">one</span>: savedModel,</div><div class="line">              <span class="attr">another</span>: anotherInstance</div><div class="line">            &#125;);</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="可用的事物操作列表："><a href="#可用的事物操作列表：" class="headerlink" title="可用的事物操作列表："></a>可用的事物操作列表：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">route = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  Transaction.start(<span class="function"><span class="keyword">function</span> (<span class="params">err, transaction</span>) </span>&#123;</div><div class="line">    OneModel.transact(transaction).create(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).update(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).find(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).findOrCreate(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).findOne(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).destroy(<span class="comment">/* ... */</span>);</div><div class="line">    OneModel.transact(transaction).count(<span class="comment">/* ... */</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>除此之外，还有事务中实例方法上的更新，保存和关联操作，只要他们来自同一事务或通过事务进行包装（<code>transaction.wrap(instance)</code>）。</p>
<h2 id="事务错误异常处理"><a href="#事务错误异常处理" class="headerlink" title="事务错误异常处理"></a>事务错误异常处理</h2><p>如果您正在对来源于<code>.populate</code>的实例执行模型实例操作（例如<code>save</code>，<code>destroy</code>等），事务可能会失败。在这种情况下，在对实例进行操作之前执行<code>transaction.wrap(instance)</code>会修正此问题。<br>如果要选择性地拦截来自此模块的错误，请使用<code>Transaction.AdapterError</code>进行前后效果。<br>需要注意的是，此适配器会自动添加一个名为<code>transactionId</code>的列。 如果不想在特定模型上使用事务，则可以通过在模型中设置<code>autoTK：false</code>来禁用针对该实例的自动列创建。</p>
<h2 id="支持只读副本"><a href="#支持只读副本" class="headerlink" title="支持只读副本"></a>支持只读副本</h2><p>当提供一个或多个只读副本源时，可以使用以下API来访问来某一个自定义复制源的数据。这会将您的数据库工作负载分布在多个系统上。<br>Readonly模式仍然使用正常的非事务性连接集而不使用只读副本。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">action = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  OneModel.readonly().find();</div><div class="line">  OneModel.readonly().findOne();</div><div class="line">  OneModel.readonly().count();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="支持在执行更新操作时获取变化内容"><a href="#支持在执行更新操作时获取变化内容" class="headerlink" title="支持在执行更新操作时获取变化内容"></a>支持在执行更新操作时获取变化内容</h2><p>由于<code>sails-mysql</code>会在每次执行Update前进行SELECT查询，该查询可以用来比对数据更新前后的变化。<code>.update</code>的第三个参数返回一个数组，该数组的对象只包含已更改的字段及其原始值。</p>
<h2 id="其他配置和功能"><a href="#其他配置和功能" class="headerlink" title="其他配置和功能"></a>其他配置和功能</h2><ol>
<li>当<code>queryCaseSensitive</code>设置为true时，会将waterline的大小写敏感度功能禁用。（标注：这是waterline-sequel的wlNext选项的功能）</li>
<li>内置的waterline还提供了以下功能：<ul>
<li><code>Model.&lt;function:operate&gt;().populateSome(Object&lt;association:criteria&gt;);</code>允许你在一次调用中得到多个关联数据的内容，它的参数也接受数组形式。</li>
<li>Model的<code>.populate</code>方法允许以<code>select: []</code>形式作为查询参数之一。</li>
<li>Model的删除操作并不会在删除过程中先获取一遍完整数据模型。</li>
</ul>
</li>
<li>另外提供了一个可以新建基于模型属性实例的异步方法<code>fromObject()</code>。<ul>
<li>此方法允许将一个包含属性的对象或者回调函数作为参数。</li>
<li>回调函数会返回错误对象以及模型实例对象。</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OneModel.fromObject(attributesObject, <span class="function"><span class="keyword">function</span> (<span class="params">err, instance</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> <span class="built_in">Error</span>; &#125;</div><div class="line"></div><div class="line">    <span class="comment">// instance is the required object</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>你可以通过发起经过Travis CI测试通过的Pull请求来贡献你的代码。你需要使用<code>npm install -d</code>来安装本项目，并且在本地执行<code>npm test</code>，然后再发起Pull请求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github地址&quot;&gt;&lt;a href=&quot;#Github地址&quot; class=&quot;headerlink&quot; title=&quot;Github地址&quot;&gt;&lt;/a&gt;Github地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;https://github.com/postmanlabs/sail
    
    </summary>
    
      <category term="Documentation" scheme="http://blog.dongderu.net/categories/Documentation/"/>
    
    
      <category term="nodejs" scheme="http://blog.dongderu.net/tags/nodejs/"/>
    
      <category term="sailsjs" scheme="http://blog.dongderu.net/tags/sailsjs/"/>
    
      <category term="waterline" scheme="http://blog.dongderu.net/tags/waterline/"/>
    
      <category term="orm" scheme="http://blog.dongderu.net/tags/orm/"/>
    
      <category term="transactionsql" scheme="http://blog.dongderu.net/tags/transactionsql/"/>
    
  </entry>
  
  <entry>
    <title>Webpack介绍</title>
    <link href="http://blog.dongderu.net/2015/11/11/what-is-webpack/"/>
    <id>http://blog.dongderu.net/2015/11/11/what-is-webpack/</id>
    <published>2015-11-11T12:12:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>webpack</strong> 是一个<strong>模块打包器</strong>。</p>
<p>webpack 处理带有依赖关系的模块，生成一系列表示这些模块的静态资源。</p>
<p><img src="http://webpack.github.io/assets/what-is-webpack.png" alt=""></p>
<h2 id="为什么再造一个模块打包器"><a href="#为什么再造一个模块打包器" class="headerlink" title="为什么再造一个模块打包器"></a>为什么再造一个模块打包器</h2><p>现有的模块打包器并不适用于大项目（如大的单页应用）。最重要的因素是，<a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">代码拆分</a>和把静态资源无缝接入模块化。</p>
<p>尝试过扩展已有模块打包器，但无法达成下面所有的目标。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>把依赖树拆成可按需加载的块</li>
<li>让初始化加载时间尽可能地少</li>
<li>每个静态资源都是一个模块</li>
<li>模块化集成第三方库</li>
<li>尽可能地自定义打包器的每一部分</li>
<li>适合大项目</li>
</ul>
<h2 id="webpack-的特别之处"><a href="#webpack-的特别之处" class="headerlink" title="webpack 的特别之处"></a>webpack 的特别之处</h2><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a><a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">代码拆分</a></h3><p>webpack 的依赖树中有同步和异步两种依赖方式。其中，异步模块将会被拆成一个新的块，并且在被优化后，生成一个对应的文件。</p>
<p>更多参考<a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">代码拆分</a>。</p>
<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a><a href="http://webpack.github.io/docs/loaders.html" target="_blank" rel="external">加载器</a></h3><p>webpack 本身只支持处理 JavaScript，但可以通过加载器来把别的资源转为 JavaScript。因此，每个资源都被当作一个模块。</p>
<p>更多参考<a href="http://webpack.github.io/docs/using-loaders.html" target="_blank" rel="external">使用加载器</a>和<a href="http://webpack.github.io/docs/loaders.html" target="_blank" rel="external">加载器</a>。</p>
<h3 id="智能解析"><a href="#智能解析" class="headerlink" title="智能解析"></a>智能解析</h3><p>webpack 有一个基本支持所有第三方库的智能解析器，甚至还支持带有表达式的依赖表述法，如 <code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code>。支持最常用的 <a href="http://webpack.github.io/docs/commonjs.html" target="_blank" rel="external">CommonJs</a> 和 <a href="http://webpack.github.io/docs/amd.html" target="_blank" rel="external">AMD</a> 这两种模块风格。</p>
<p>更多参考<a href="http://webpack.github.io/docs/context.html" target="_blank" rel="external">含有表达式的依赖表述</a>、<a href="http://webpack.github.io/docs/commonjs.html" target="_blank" rel="external">CommonJs</a> 和 <a href="http://webpack.github.io/docs/amd.html" target="_blank" rel="external">AMD</a>。</p>
<h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a><a href="http://webpack.github.io/docs/plugins.html" target="_blank" rel="external">插件系统</a></h3><p>webpack 有一个很出色的插件系统，甚至大部分内置功能都是基于这个插件系统而来的。这个插件系统允许你根据需要来自定义 webpack，以及通过开源的方式来分发通用插件。</p>
<p>更多参考<a href="http://webpack.github.io/docs/plugins.html" target="_blank" rel="external">插件</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;webpack&lt;/strong&gt; 是一个&lt;strong&gt;模块打包器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;webpack 处理带有依赖关系的模块，生成一系列表示这些模块的静态资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://webpack.github.i
    
    </summary>
    
      <category term="Documentation" scheme="http://blog.dongderu.net/categories/Documentation/"/>
    
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="translation" scheme="http://blog.dongderu.net/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>Facebook：MVC不适合大规模应用，改用Flux</title>
    <link href="http://blog.dongderu.net/2015/05/30/2014-5-30-facebook-mvc-flux/"/>
    <id>http://blog.dongderu.net/2015/05/30/2014-5-30-facebook-mvc-flux/</id>
    <published>2015-05-30T01:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="">https://www.infoq.com/news/2014/05/facebook-mvc-flux</a></p>
<p>Facebook认为MVC无法满足他们的扩展需求，因此他们决定使用另一种模式：Flux。</p>
<p>在最近<a href="https://www.facebook.com/f8" target="_blank" rel="external">F8</a>大会<a href="https://www.youtube.com/watch?v=nYkdrAPrdcw" target="_blank" rel="external">黑客之道：重新思考Facebook的Web应用开发</a>，Facebook工程经理Tom Occhino说，由于他们“非常巨大”的代码库和庞大的组织，“MVC真的很快就变得非常复杂”，他们得出结论，认为MVC不适合于大规模应用。每次他们努力增加一项新特性时，系统的复杂性成级数增长，代码变得“脆弱和不可预测”。对于刚接触某个代码库的开发人员来说，这正成为一个严重的问题，因为他们害怕破坏什么东西，不敢动这些代码。其结果是Facebook的MVC正在土崩瓦解。</p>
<p>解决这个问题需要“以某种方式使代码结构化，使其更加可预测”。这已经通过<a href="http://facebook.github.io/react/docs/flux-overview.html" target="_blank" rel="external">Flux</a>和<a href="http://facebook.github.io/react/index.html" target="_blank" rel="external">React</a>完成。Flux是一个系统架构，用于推进应用中的数据单向流动。根据Occhino所述，React是一个JavaScript框架，用于构建“可预期的”和“声明式的”Web用户界面，它已经使Facebook更快地开发Web应用。</p>
<p>Facebook软件工程师Jing Chen，补充说明MVC非常适合小型应用，但是当系统中有很多的模型与相应的视图时，其复杂性就迅速扩大，如下图所示：<br><img src="http://cdn2.infoqstatic.com/statics_s2_20161011-0321/resource/news/2014/05/facebook-mvc-flux/zh/resources/0519000.png" alt=""><br>根据Chen的说法，这样的程序将会非常难以理解和调试，特别是模型与视图间可能存在的双向数据流动，因此提出了以下Flux设计：<br><img src="http://cdn2.infoqstatic.com/statics_s2_20161011-0321/resource/news/2014/05/facebook-mvc-flux/zh/resources/0519001.png" alt=""><br>Store包含了应用的所有数据，Dispatcher替换了原来的Controller，当Action触发时，决定了Store如何更新。当Store变化后，View同时被更新，还可以生成一个由Dispatcher处理的Action。这确保了数据在系统组件间单向流动。当系统有多个Store和View时，仍可视为只有一个Store和一个View，因为数据只朝一个方向流动，并且不同的Store和View之间不会直接影响彼此。</p>
<p><a href="http://facebook.github.io/react/docs/flux-overview.html" target="_blank" rel="external">Facebook React在GitHub的页面</a>详细说明了Flux、Dispatcher和Store：</p>
<blockquote>
<p>Dispatcher是中心枢纽，管理着Flux应用中的所有数据流。它本质上是Store的回调注册。每个Store注册它自己并提供一个回调函数。当Dispatcher响应Action时，通过已注册的回调函数，将Action提供的数据负载发送给应用中的所有Store。</p>
<p>随着应用程序的增长，Dispatcher变得更加关键，因为它将管理Store之间的依赖，以特定的顺序调用注册的回调函数。Store可以声明等待其它Store完成更新后，再相应地更新自己⋯⋯<br>Store包含应用程序的状态和逻辑。它们的角色某种程度上与传统MVC中的Model类似，但它们管理很多对象的状态，它们不是某个对象的实例，也不是Backbone集合。Store不只是简单地管理ORM风格的对象集合，它还为应用程序中的特定领域（Domain）管理应用状态。</p>
</blockquote>
<p>Chen说，更重要的是在任何其它Action触发之前，确保数据层完成视图的更新。当前一个动作还未处理完时，Dispatcher能够拒绝Action。对于有其它副作用的动作，例如更新其它视图，这个设计非常有用。它让代码变得更简洁，新开发人员更容易理解也更容易调试。Flux帮助Facebook消除了一个聊天Bug，该Bug提示用户有新消息，但实际上没有。</p>
<p>在GitHub上可访问<a href="http://facebook.github.io/react/docs/flux-todo-list.html" target="_blank" rel="external">Flux TodoMVC</a>教程及其<a href="https://github.com/facebook/react/tree/master/examples/todomvc-flux" target="_blank" rel="external">源代码</a>。</p>
<p>Facebook可以使用任何他们觉得合适的设计，但这个问题依旧存在。MVC适合大规模应用吗？毕竟，有那么多大规模网站。</p>
<p><strong>更新</strong> 原文在英文站发布后，许多开发者在Reddit上评论Facebook的MVC。以下是一些评论，有些认为Facebook误用了MVC，而另一些则认为他们做了正确的事：</p>
<blockquote>
<p>giveupitscrazy：<br>这毫无意义。<br>其一，他们的MVC图形绝对是错的。他们描绘了一个单一控制器处理多个模型，你几乎可以肯定会基于它们交互的Model或者逻辑分区来分离控制器。<br>很显然，他们所描述的这样一个程序无法工作，同时它也不是真正的MVC。<br>如果你比较他们的Flux图形和<a href="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png" target="_blank" rel="external">真正的MVC图形</a>，你就会得出清晰的结论，对Web应用来说MVC没有任何内在问题。<br>balefrost：<br>并且⋯⋯事情是这样的⋯⋯他们的Flux图与你的MVC图非常接近。<br>他们重新发明了真正的MVC，然后决定给它一个新名字。哈哈！<br>hackinthebochs：<br>看起来这个架构将MVC变成了某种基于事件的东西。“Store”将它们自己注册到Dispatcher（可能是任何调用依赖关系），Dispatcher处理Action并确保正确的调用链。这样就将保证正确调用顺序的压力从Controller转移到Dispatcher和Store。这将减少改变行为所需的理解。<br>runvnc：<br>我刚扫了一眼，虽然我不认为自己对这个非常理解，但我理解和同意它的总体思路。</p>
</blockquote>
<p>Reddit用户jingc09，通过她的评论，好像是Jing Chen，增加了一些回复：</p>
<blockquote>
<p>jingc09：是啊，这是个复杂的幻灯片（那张有多个模型和视图并且双向数据流的片子），部分原因是因为MVC究竟是什么没有统一的认识，很多人对它有不同的观点。我们真正想讨论的是双向数据流，数据变化能向后循环并产生级联效应。</p>
</blockquote>
<p>她还试图澄清Flux的Dispatcher不是MVC Controller：</p>
<blockquote>
<p>我想澄清的一件事是，Dispatcher没有扮演Controller同样的角色。Dispatcher中没有业务逻辑，我们在多个应用中使用相同的Dispatcher代码。它只是一个中心枢纽，将事件分发给感兴趣的订阅者（通常是Store）。但在Flux中它是很重要的，因为它强制单向数据流⋯⋯</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">Wikipedia关于MVC Controller解释：</a></p>
<blockquote>
<p>Controller能发送命令到Model去更新Model的状态（例如编辑文档）。它也能发送命令到相关的View去修改这个Model的View的展现（例如滚动文档）。</p>
</blockquote>
<p>对此，Chen评论道：</p>
<blockquote>
<p>Dispatcher不能做任何这些事，命令必须从其它地方（View、服务器响应和实时更新）传递到Dispatcher。<a href="">https://github.com/facebook/react/blob/master/examples/todomvc-flux/js/dispatcher/Dispatcher.js</a> 也许有助于说明这一点。</p>
</blockquote>
<p>根据Reddit上的这些评论，关于MVC是什么以及应该如何实现，似乎有些混乱。</p>
<p>考虑到Facebook对MVC的处理，我们有两个观察：</p>
<p>1）第一张幻灯片似乎真的画了太多的Model和View，让人怀疑现实生活中真的有类似的情况吗？Facebook使用Flux解决的问题是一个有3个View的聊天应用。</p>
<p>2）在他们的MVC例子中，为何是View产生数据流，从而造成双向流动？同时，在Flux图中，为何是View产生Action？View不应该产生任何东西。View只是“视图”，没有别的。Facebook是在误用MVC吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;&quot;&gt;https://www.infoq.com/news/2014/05/facebook-mvc-flux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Facebook认为MVC无法满足他们的扩展需求，因此他们决定使用另一种模式：Flux。&lt;/p&gt;
&lt;p&gt;在最近&lt;a 
    
    </summary>
    
      <category term="Resources" scheme="http://blog.dongderu.net/categories/Resources/"/>
    
    
      <category term="bookmark" scheme="http://blog.dongderu.net/tags/bookmark/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="react" scheme="http://blog.dongderu.net/tags/react/"/>
    
      <category term="flux" scheme="http://blog.dongderu.net/tags/flux/"/>
    
  </entry>
  
  <entry>
    <title>2015前端[JS]工程师必知必会</title>
    <link href="http://blog.dongderu.net/2015/04/30/2015-4-30-frontend-engineer-knowledges/"/>
    <id>http://blog.dongderu.net/2015/04/30/2015-4-30-frontend-engineer-knowledges/</id>
    <published>2015-04-30T02:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载地址：<a href="">https://zhuanlan.zhihu.com/p/20002850</a><br>作者：sunnyzhou<br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次我写<a href="https://link.zhihu.com/?target=http%3A//rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/" target="_blank" rel="external">《前端工程师必知必会》</a>已经是三年前了，那是我写过最火的文章了。三年了，我仍然会在Twitter上收到关于这篇文章的消息。</p>
<p>从2012年到现在，一篇文章都没发过让我觉得有点羞羞哒。三年是一段很长的时间，很多东西都发生了改变。2012年，我鼓励同学们去学习浏览器开发者工具和模块化；虽然有很多同学会觉得CSS预编译和客户端模板引擎并不靠谱，但我仍然想要说一说它们；还有JSHint，虽然有#getoffmylawn（滚出我的地盘）的警告，但依然无法阻止JSHint成为一个受欢迎的理念（准确的说，JSLint真的（只是）存在过）。</p>
<p>已经是2015年了，我想写一篇新的，但是当我坐下来开始动笔的时候，想到了两个事情。一，这些东西被称作“必知必会”可能有人会觉得不太公平——如果你已经觉得<a href="https://link.zhihu.com/?target=http%3A//rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/" target="_blank" rel="external">2012年的那篇文章</a>如此，那本文也是一样的了。也许有同学会说，我们应该把 “足够应付业务需求的技能” 作为 “前端必须掌握的知识”，但考虑到前端行业里也有各种各样的工作可供选择，这么做也只能得到一个并不适合所有人的 “前端基础知识”。对于我来说，我需要的不是工作，我想要的是被邀请去做一份牛逼的工作。我想要的不只是去干活而已，而是想和一群牛逼的人一起做牛逼的事。我不想仅仅满足于用已有的知识来完成现在的工作，而是希望掌握更多的知识来解决未来将会面对的问题。</p>
<p>第二，我现在已经完全把Javascript作为我的核心了：CSS知识只有在必须关注性能问题时才会用到，其他场景已经用的越来越少。我知道有很多牛逼的前端同学并不是这样的，但我也意识到，关注JS的同学和关注CSS的同学之间的距离也越来越远。这可能需要在另起一篇文章来讨论，不过我想说的是，这篇文章中不会有介绍CSS技能标准的内容，因为我还远远没有达到能那么做的水平。</p>
<p>总之，就算这个技能列表并不适合你的前端工作，没关系，不要有压力，地球也不会爆炸。</p>
<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><p>回想2009年，那时候当你知道 HTML5 在2014年才能用的时候，你是不是觉得这辈子基本上都用不到它了？如果是，那么你需要准备好接受进展缓慢但是已经趋于稳定的ES6了，它也是下一代的Javascript（现在叫 ES2015 了，嗯，这名字至少表示今年就能用了）。就我而言，ES6，额，ES2015 无疑是我个人现在最关注的 Javascript 内容。在 ES6 中将会出现一些比较大的变化：类，真正的私有，经过改进更易用的函数和参数设定，可导入的模块，等等等等。那些掌握和理解新的语法的同学以后将会在 JS 社区牛逼闪闪。相关阅读：</p>
<p><a href="https://link.zhihu.com/?target=https%3A//leanpub.com/understandinges6/read/" target="_blank" rel="external">Understanding ES6</a>，Nicholas Zakas 正在写的书。<br>BabelJS，一个可以把你写的 ES6 的代码编译成 ES5 并在现代浏览器中运行的工具。他们也有一个不错的<a href="https://link.zhihu.com/?target=http%3A//babeljs.io/docs/learn-es6/" target="_blank" rel="external">介绍 ES6 的文档</a>。<br><a href="https://link.zhihu.com/?target=http%3A//es6rocks.com/" target="_blank" rel="external">ES6 Rocks</a>，里面有大量的文章探索 ES6 的特性，语义和缺陷。<br>你也许会问：那我需要成为一个 ES6 专家么？也许现在不需要，但至少你得和你的同事懂的一样多吧？或者比他们稍微多一点？当然，如果能在你的下一个新项目中作为一个娱乐性的技术尝试也是不错的，做好准备肯定没错的，因为我们永远不知道下一刻会发生什么。</p>
<p>先不说新的语言特性，使用回调和 promises 管理异步 Javascript 至少得背的滚瓜烂熟吧。浏览器端应用加载，以及应用间通信策略得形成一套自己的观点吧。而且你应该知道哪种框架最适合你，而不是现在还把时间花在理解各种框架的实现原理和该选择哪种框架上。</p>
<h2 id="模块化和构建工具"><a href="#模块化和构建工具" class="headerlink" title="模块化和构建工具"></a>模块化和构建工具</h2><p>毫无疑问，模块化是构建 Web 客户端应用的基石。回到2012年，关于使用哪种模块化（<a href="https://link.zhihu.com/?target=http%3A//webpack.github.io/docs/commonjs.html" target="_blank" rel="external">AMD/CommonJS</a>）方案构建浏览器端应用还存在很多争论。而最近慢慢火起来的 <a href="https://link.zhihu.com/?target=https%3A//github.com/umdjs/umd" target="_blank" rel="external">UMD</a> 则在保证代码可复用的前提下尝试避免这样的问题。 其实也没什么好争得，毕竟这俩玩意儿之间也就差几个字符吧？</p>
<p>我觉得类似这样的争论其实并不都需要有一个答案，这也是我觉得从2012年到现在我们发生的最大的转变，当然，也许只是我自己这么认为。因为我觉得与其说“我再也不用 AMD 了”之类的话，倒不如多去讨论 “在开发和打包过程中使用 CommonJS 和 npm 遇到的各种难题” 来的更有价值。</p>
<p>虽然很感激 <a href="https://link.zhihu.com/?target=http%3A//requirejs.org/" target="_blank" rel="external">RequireJS</a> 曾经对模块化做出的贡献，不过现在我开始有点迷恋 <a href="https://link.zhihu.com/?target=http%3A//webpack.github.io/" target="_blank" rel="external">webpack</a> 了。 webpack 的构建配置比 RequireJS 更加易于理解，也更具访问性。通过它的热插拔特性和内置的本地静态服务器可以让发布更加便捷。它并不强制要求使用 AMD 或者 CommonJS – 两个它都支持。它还实现了一大堆加载器，用来完成常见的繁琐工作。 <a href="https://link.zhihu.com/?target=http%3A//browserify.org/" target="_blank" rel="external">Browserify</a> 也值得去了解一下，不过我个人认为它比 Webpack 落后很多。一些靠谱的朋友告诉我说 <a href="https://link.zhihu.com/?target=https%3A//github.com/systemjs/systemjs" target="_blank" rel="external">systemjs</a> 也是这个领域的竞争者，不过我还没有用过，而且它的文档烂的我连看都不想看。不过我觉得它的好基友 <a href="https://link.zhihu.com/?target=http%3A//jspm.io/" target="_blank" rel="external">jspm</a> (包管理器)比较有趣，jspm 可以让你从各种包管理服务器加载你需要的各种组件，(组件必须是符合 ES6, AMD, CommonJS and globals 规范的)，包括 npm, github 等，但是我对于这两个玩意的合体还是有点不太理解。啊，还有，虽然我说了这么多关于模块化之外的内容，但我从来没想过放弃 AMD，我们边走边看吧。</p>
<p>我觉得如果要停止对模块化和构建工具的争论，形成统一的模块化系统，并且在这个系统里面，任何项目的代码都可以共享，而且还不需要 UMD 这样额外的补丁工具，我们还有很长的路要走。理想状况下，<a href="https://link.zhihu.com/?target=http%3A//www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">ES6 modules</a> 的到来会解决这些问题，不过在这一天到来之前，类似 UMD 之类的转换器会填补这些空缺，不过貌似这样做我们又把事情变得复杂了，好像我们也总喜欢把事情弄得复杂。</p>
<p>与此同时，前端开发人员也需要对构建工具，各种模块化系统有自己的见解和知识储备。不管是好是坏，根据 Javascript 现在的进度，你的模块化策略会对你的项目有比较大的影响。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>客户端的代码测试变得越来越普遍，最近也诞生了一些新的测试框架： <a href="https://link.zhihu.com/?target=http%3A//karma-runner.github.io/0.12/index.html" target="_blank" rel="external">Karma</a>，<a href="https://link.zhihu.com/?target=https%3A//theintern.github.io/" target="_blank" rel="external">Intern</a> 。我发现基于 promise 的 Intern 的异步测试方法相当优雅。不过可能是因为习惯，我大多数情况下还是用 Mocha 写测试用例。</p>
<p>测试的主要障碍其实是前端开发者的代码编写方式。我在2012年发表过一个关于<a href="https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DOzjogCFO4Zo" target="_blank" rel="external">《编写可测试的Javascript》</a>下载地址的演讲，紧接着几个月后又发表了一篇<a href="https://link.zhihu.com/?target=http%3A//alistapart.com/article/writing-testable-javascript" target="_blank" rel="external">]相关的文章</a>。</p>
<p>测试的第二大障碍是工具。Webdriver 是一个艰难而巨大的工作。目前在各个浏览器端做持续集成的 UI 自动化测试基本上是不可能的，更不用说移动端了。我们仍然停留在局限于某一小部分浏览器和设备上做轻量级的自动化功能测试，尽我们所能去研究怎样快速，低成本的进行这种测试的阶段。</p>
<p>如果你对如何改进代码的可测试性感兴趣的话，那么唯一一本最值得看的书是 <a href="https://link.zhihu.com/?target=http%3A//www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052" target="_blank" rel="external">Working Effectively with Legacy Code</a> （<a href="https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/book/536" target="_blank" rel="external">中译版：《修改代码的艺术》</a>。作者 Michael Feathers 定义了“遗留代码”的概念：任何未经测试的代码都是遗留代码。在测试领域，最基本的要素就是上面这句话，尽管你可能不这么认为。</p>
<h2 id="流程自动化"><a href="#流程自动化" class="headerlink" title="流程自动化"></a>流程自动化</h2><p>你首先会想到 <a href="https://link.zhihu.com/?target=http%3A//gruntjs.com/" target="_blank" rel="external">Grunt</a>，这也是理所当然的。而 <a href="https://link.zhihu.com/?target=http%3A//gulpjs.com/" target="_blank" rel="external">Gulp</a> 和 <a href="https://link.zhihu.com/?target=http%3A//broccolijs.com/" target="_blank" rel="external">Broccoli</a> 的自动化构建方式也别具匠心。我没用过Broccoli，只玩过Gulp，我也开始意识到Grunt对于依赖其他服务的复杂任务的自动化工作存在局限性，尤其是当这种任务每天需要运行上千次的时候。</p>
<p><a href="https://link.zhihu.com/?target=http%3A//yeoman.io/" target="_blank" rel="external">Yeoman</a>是在我写完2012年的那篇文章仅仅45天之后发布的，我承认当时我并没有及时去尝试一下。不过最近我开始启动一些新项目，这些新项目有两个特点<br>a) 这些项目都是从零开始<br>b) 尝试用一些不同的技术方案，试图通过这种方式找到 Bazaarvoice（提供第三方点评服务）上第三方 JS 应用的规范化的开发方式。<br>Yeoman 在这两方面做的都很好。一个简单的 yo react-webpack 命令就可以为你初始化好你的项目，然后各种你想要的玩具也都应有尽有：生成测试用例，本地静态服务器，hello world 入门程序，等等等等。如果 React 和 webpack 不是你想要的，也许你会在 Yeoman 的 generators（项目生成器）里面找到一个你想要的，当然，自己自定义一个这样的构建包也是比较容易的。</p>
<p>鉴于 Yeoman 只是一个在项目开始时才会用到的构建工具，并且鉴于我们并不是总是做新项目，所以大多情况下了解一下就够了。除非，你也想去规范整个项目开发过程，那么它可能会更有价值一点。</p>
<p>Broccoli 已经得到了 ember-cli 的采纳，我觉得他们的配对可能会有一个新名字，这样在未来才比较方便和 Grunt /Yeoman 对抗。而 Grunt 和 Yeoman 的开发进度也放缓了，所以未来会发生什么，我们还是静观其变吧。</p>
<h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><p>如果你像我一样，一看见违反代码规范的代码时就开始抓狂，那么 <a href="https://link.zhihu.com/?target=http%3A//jscs.info/" target="_blank" rel="external">JSCS</a> 和<br><a href="https://link.zhihu.com/?target=http%3A//eslint.org/" target="_blank" rel="external">ESLint</a> 就是老天赐给你的礼物，而2012压根就没这些玩意。他们都提供了自定义代码规范的方式，并且可以在代码提交前对你的代码做自动化校验。这让我想起了…</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>从2012年到现在，github 的使用流程并没有发生很大的变化，比如在 pull request 页面连个分支名都没有（只是恶搞一下）。</p>
<p>你应该非常清楚和流畅地使用功能分支（feature branches）, 使用 rebase 合并别人的代码干活，使用交互式 rebase 命令和 squash 合并提交记录，或者尽可能细颗粒度的划分项目内容，避免引起代码冲突。另一个可用的 Git 工具是钩子，具体而言，就是你可以在 push 前，commit 前，执行你的各种测试用例，检查代码质量。你可以自己写钩子，也可以使用 <a href="https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/ghooks" target="_blank" rel="external">ghooks</a> ，由于 ghooks 使钩子工作变得非常简单，所以你简直没有理由不用它。</p>
<h2 id="客户端模板"><a href="#客户端模板" class="headerlink" title="客户端模板"></a>客户端模板</h2><p>这可能是我在2012年的那篇文章中写的最烂的内容了，某种意义上的“烂”。客户端模板还是很有价值的，而且它已经被内置到 ES2015 里面了，这不仅仅只是一件好事而已。这些年也有一些惨重的教训，不少团队把所有的渲染工作全部丢到浏览器端去做，结果产生了严重的性能问题，所以 “在浏览器端渲染生成所有 HTML” 的做法理所当然的被摒弃了。 而更为聪明的做法则是，把 HTML 生成放在服务器端，或者通过预编译的方式，先将模板做为静态资源储存起来，在需要时快速的编译成 HTML，需要更新时也可以直接在客户端更新模板。</p>
<p>这里会有一些新的展望，不仅是对我自己，也是对所有人，当你在考虑性能问题时，也许没必要把自己完全限定在浏览器范围内。所以，这又让我想起了……</p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>听说你懂 Javascript，那么我觉得你也应该懂 Node，至少在遇到 Node 问题是能帮得上忙的，如果连忙都帮不上，那也至少深入研究一下吧：Node 的文件系统，流，服务器，完全不同于前端的一些开发模式等等。对后端敬而远之只会限制我们前端的发展潜力。</p>
<p>即使你的真实生产环境中后端不用 Node，当你的工作被后端限制或阻碍的时候，Node 也是一个非常有用的工具。最起码，你也应该熟悉怎么去初始化一个 Node 项目，怎么用 Express 搭建服务器设置路由，怎么使用请求模块代理请求。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感谢 Paul, Alex, Adam, Ralph 对本文的 Review，感谢他们毫不吝啬的指出我的不足之处，并给我提了很好的意见。</p>
<p>就这样，祝你好运。也许，三年之后我们会再见。</p>
<p>原文链接: <a href="https://link.zhihu.com/?target=http%3A//rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015/" target="_blank" rel="external">A Baseline for Front-End ‘JS’ Developers: 2015</a></p>
<p>外刊君推荐阅读：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//leanpub.com/understandinges6/read/" target="_blank" rel="external">Understanding ES6</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues/19" target="_blank" rel="external">2015前端组件化框架之路</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载地址：&lt;a href=&quot;&quot;&gt;https://zhuanlan.zhihu.com/p/20002850&lt;/a&gt;&lt;br&gt;作者：sunnyzhou&lt;br&gt;来源：知乎&lt;br&gt;著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://blog.dongderu.net/categories/Thinking/"/>
    
    
      <category term="bookmark" scheme="http://blog.dongderu.net/tags/bookmark/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="career" scheme="http://blog.dongderu.net/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>前端收集</title>
    <link href="http://blog.dongderu.net/2015/04/29/2015-4-29-front-end-collect/"/>
    <id>http://blog.dongderu.net/2015/04/29/2015-4-29-front-end-collect/</id>
    <published>2015-04-29T07:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="">https://github.com/foru17/front-end-collect</a></p>
<p>在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。</p>
<p>自己 RSS 长期订阅了一些IT 和技术相关博客，这里是我Feedly 输出的opml，可直接导入一些RSS 阅读器:<br><a href="https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml" target="_blank" rel="external">https://github.com/foru17/luolei-dotfiles/blob/master/feedly.opml</a></p>
<p>====</p>
<h4 id="前端收集图谱"><a href="#前端收集图谱" class="headerlink" title="前端收集图谱"></a><a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external">前端收集图谱</a></h4><p>此部分为<a href="https://github.com/jikeytang" target="_blank" rel="external">@jikeytang </a>贡献</p>
<ul>
<li>clone <a href="https://github.com/hjzheng/front-end-collect" target="_blank" rel="external">https://github.com/hjzheng/front-end-collect</a></li>
<li>cd front-end-collect</li>
<li>bower install</li>
<li>放入你喜欢的web容器,访问index.html即可</li>
<li>你也直接可以访问: <a href="http://get-set.cn/front-end-collect/" target="_blank" rel="external">http://get-set.cn/front-end-collect/</a></li>
<li>支持Chrome, Firefox and IE10&amp;11以上浏览器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png" alt="image"></p>
<h4 id="聚合-amp-amp-周报订阅"><a href="#聚合-amp-amp-周报订阅" class="headerlink" title="聚合&amp;&amp;周报订阅"></a>聚合&amp;&amp;周报订阅</h4><table>
<thead>
<tr>
<th>名称</th>
<th>订阅地址</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>英文推送</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Html5 Weekly</td>
<td><a href="http://html5weekly.com/" target="_blank" rel="external">http://html5weekly.com/</a></td>
<td>Html 技术类</td>
</tr>
<tr>
<td>CSS Weekly</td>
<td><a href="http://css-weekly.com/" target="_blank" rel="external">http://css-weekly.com/</a></td>
<td></td>
</tr>
<tr>
<td>Javascript Weekly</td>
<td><a href="http://javascriptweekly.com/" target="_blank" rel="external">http://javascriptweekly.com/</a></td>
<td>JS相关，同样有 html,css 和工具相关</td>
</tr>
<tr>
<td>Web Design Weekly</td>
<td><a href="http://web-design-weekly.com/" target="_blank" rel="external">http://web-design-weekly.com/</a></td>
<td>设计、技术、技巧、工具聚合</td>
</tr>
<tr>
<td>UX Weekly</td>
<td><a href="http://uxwkly.com/" target="_blank" rel="external">http://uxwkly.com/</a></td>
<td>用户体验、网页设计推送</td>
</tr>
<tr>
<td>Web Tools Weekly</td>
<td><a href="http://webtoolsweekly.com/" target="_blank" rel="external">http://webtoolsweekly.com/</a></td>
<td>Js，工具推送</td>
</tr>
<tr>
<td>RESPONSIVE DESIGN NEWSLETTER</td>
<td><a href="http://responsivedesignweekly.com/" target="_blank" rel="external">http://responsivedesignweekly.com/</a></td>
<td>每周推送一次响应式设计相关</td>
</tr>
<tr>
<td>Tutorialzine</td>
<td><a href="http://tutorialzine.com/" target="_blank" rel="external">http://tutorialzine.com/</a></td>
<td>精品教程和资源推送</td>
</tr>
<tr>
<td>Sidebar</td>
<td><a href="http://sidebar.io/" target="_blank" rel="external">http://sidebar.io/</a></td>
<td>每天、每半周、每周推送5条设计相关</td>
</tr>
<tr>
<td>The Hacker News Newsletter</td>
<td><a href="http://www.hackernewsletter.com/" target="_blank" rel="external">http://www.hackernewsletter.com/</a></td>
<td>HN 每周精选</td>
</tr>
<tr>
<td>Design News</td>
<td><a href="https://news.layervault.com/" target="_blank" rel="external">https://news.layervault.com/</a></td>
<td>F2类资讯聚合</td>
</tr>
<tr>
<td>Css Animations</td>
<td><a href="http://cssanimation.rocks/" target="_blank" rel="external">http://cssanimation.rocks/</a></td>
<td>关于CSS动画的订阅</td>
</tr>
<tr>
<td>HACKDESIGN</td>
<td><a href="http://hackdesign.org/" target="_blank" rel="external">http://hackdesign.org/</a></td>
<td>每周发布一个设计类课程</td>
</tr>
<tr>
<td><strong>中文推送</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>稀土:掘金</td>
<td><a href="http://gold.xitu.io/" target="_blank" rel="external">http://gold.xitu.io/</a></td>
<td>国内十分用心的开发者技术分享、交流平台</td>
</tr>
<tr>
<td>SegmentFault精选</td>
<td><a href="http://segmentfault.com/" target="_blank" rel="external">http://segmentfault.com/</a></td>
<td>国内开发者技术问答社区每周精选问答</td>
</tr>
<tr>
<td>FE Weekly</td>
<td><a href="http://www.feweekly.com/" target="_blank" rel="external">http://www.feweekly.com/</a></td>
<td>每周一次，内容主要是英文的，不过有中文导读</td>
</tr>
<tr>
<td>EchoJs_News</td>
<td><a href="http://www.echojs.com/" target="_blank" rel="external">http://www.echojs.com/</a></td>
<td>每天推送若干好文，都是英文的，JS技术类</td>
</tr>
<tr>
<td>碼天狗週刊</td>
<td><a href="http://weekly.codetengu.com/" target="_blank" rel="external">http://weekly.codetengu.com/</a></td>
<td>台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。</td>
</tr>
<tr>
<td>前端资源分享 半月刊</td>
<td><a href="http://www.hacke2.cn/monthly/" target="_blank" rel="external">http://www.hacke2.cn/monthly/</a></td>
<td>每半月发布最新高质量的前端资源</td>
</tr>
</tbody>
</table>
<h4 id="专业博客"><a href="#专业博客" class="headerlink" title="专业博客"></a>专业博客</h4><p>注:此处<code>活跃度</code>为博客更新频率，<code>原创度</code>指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。</p>
<h5 id="中文博客"><a href="#中文博客" class="headerlink" title="中文博客"></a>中文博客</h5><table>
<thead>
<tr>
<th>名称</th>
<th>活跃度</th>
<th>原创度</th>
<th>维护者</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.w3cplus.com/" target="_blank" rel="external">W3Cplus</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>携程 @大漠</td>
<td>国内最优秀的前端博客，原创居多</td>
</tr>
<tr>
<td><a href="http://www.w3cfuns.com/" target="_blank" rel="external">W3Cfuns</a></td>
<td>★★★★★</td>
<td>★★★★☆</td>
<td><a href="http://www.w3cfuns.com/misc.php?mod=faq&amp;action=faq&amp;id=1" target="_blank" rel="external">#</a></td>
<td>专注于web前端开发行业的综合性门户网站</td>
</tr>
<tr>
<td><a href="http://www.qianduan.net/" target="_blank" rel="external">前端观察</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td>腾讯 ISUX @神飞</td>
<td>曾经最优秀，最近更新不频繁了</td>
</tr>
<tr>
<td><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯web前端 AlloyTeam 团队</a></td>
<td>★★★★</td>
<td>★★★★</td>
<td><a href="http://t.qq.com/AlloyTeam" target="_blank" rel="external">@腾讯AlloyTeam</a></td>
<td>来自于腾讯SNG(社交网络事业群)</td>
</tr>
<tr>
<td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external">张鑫旭-鑫空间-鑫生活</a></td>
<td>★★★★☆</td>
<td>★★★★★</td>
<td>张鑫旭</td>
<td>重构很厉害，不少经典文章经验</td>
</tr>
<tr>
<td><a href="http://www.36ria.com/" target="_blank" rel="external">ria之家</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td>淘宝 @明河</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.daqianduan.com/" target="_blank" rel="external">大前端</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">#</a></td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.cssforest.org/blog/" target="_blank" rel="external">CSS森林</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">关于</a></td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.shejidaren.com/" target="_blank" rel="external">设计达人</a></td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
<td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="external">#</a></td>
<td>更新较频繁，但转载也较多</td>
</tr>
<tr>
<td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰博客</a></td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
<td><a href="http://www.ruanyifeng.com/about.html" target="_blank" rel="external">#</a></td>
<td>牛人一个</td>
</tr>
<tr>
<td><a href="http://beforweb.com/" target="_blank" rel="external">Be For Web - 为网而生 - 原创译文博客</a></td>
<td>★★★★☆</td>
<td>★★★★☆</td>
<td><a href="http://weibo.com/c7210" target="_blank" rel="external">@C7210</a></td>
<td>关注移动应用及互联网产品、用户体验设计、前端开发</td>
</tr>
</tbody>
</table>
<h5 id="国外博客"><a href="#国外博客" class="headerlink" title="国外博客"></a>国外博客</h5><table>
<thead>
<tr>
<th>名称</th>
<th>活跃度</th>
<th>原创度</th>
<th>维护者</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.smashingmagazine.com/" target="_blank" rel="external">Smashing Magazine</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>业界权威，web 设计很赞</td>
</tr>
<tr>
<td><a href="http://hub.tutsplus.com/" target="_blank" rel="external">Tuts</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>-</td>
<td>国外知名开发者网站</td>
</tr>
<tr>
<td><a href="http://www.developerdrive.com/" target="_blank" rel="external">DeveloperDrive</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>-</td>
<td>优质前端技术信息</td>
</tr>
<tr>
<td><a href="http://css-tricks.com/" target="_blank" rel="external">CSS-TRICKS</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Chris Coyier</td>
<td>左边这位是大神</td>
</tr>
<tr>
<td><a href="http://webdesignerwall.com/" target="_blank" rel="external">Web Designer Wall</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Nick La.</td>
<td>优质 Html5,CSS3等教程</td>
</tr>
<tr>
<td><a href="http://tutorialzine.com/" target="_blank" rel="external">Tutorialzine</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>大量 web 教程和资源</td>
</tr>
<tr>
<td><a href="http://inspectelement.com/" target="_blank" rel="external">Inspect Element</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>CSS,wordpress 相关教程挺多</td>
</tr>
<tr>
<td><a href="http://tympanus.net/codrops/" target="_blank" rel="external">Codrops</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>设计、交互、CSS</td>
</tr>
<tr>
<td><a href="http://www.onerutter.com/" target="_blank" rel="external">Jake Rutter</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Jake Rutter</td>
<td>Jquery 作者，不解释了</td>
</tr>
<tr>
<td><a href="http://www.paulirish.com/" target="_blank" rel="external">Paul Irish</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Paul Irish</td>
<td>大神,Google Chrome团队,Yeoman</td>
</tr>
<tr>
<td><a href="http://krasimirtsonev.com/blog" target="_blank" rel="external">Krasimir Tsonev</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Krasimir Tsonev</td>
<td>html5,ccs3,javascript</td>
</tr>
<tr>
<td><a href="http://www.nczonline.net/" target="_blank" rel="external">NCZOnline</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>Nicholas C. Zakas</td>
<td>html5,ccs3,javascript</td>
</tr>
<tr>
<td><a href="http://www.html5rocks.com/en/" target="_blank" rel="external">HTML5 Rocks</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>html5权威网站</td>
</tr>
<tr>
<td><a href="http://alistapart.com/" target="_blank" rel="external">A List Apart</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>可以改变世界的文章</td>
</tr>
<tr>
<td><a href="http://hakim.se/" target="_blank" rel="external">hakim</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>HAKIM EL HATTAB</td>
<td>ccs3,javascript</td>
</tr>
<tr>
<td><a href="http://dailyjs.com/" target="_blank" rel="external">DailyJS</a></td>
<td>★★★★★</td>
<td>★★★★★</td>
<td>#</td>
<td>javascript</td>
</tr>
</tbody>
</table>
<h5 id="活跃微博"><a href="#活跃微博" class="headerlink" title="活跃微博"></a>活跃微博</h5><table>
<thead>
<tr>
<th>ID</th>
<th>公司</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://weibo.com/xitucircle" target="_blank" rel="external">@稀土圈</a></td>
<td>#</td>
<td>强烈推荐，分享一些技术文章和Github项目</td>
</tr>
<tr>
<td><a href="http://weibo.com/w3cchina" target="_blank" rel="external">@w3c中国</a></td>
<td>#</td>
<td>万维网联盟中国办事处官方微博</td>
</tr>
<tr>
<td><a href="http://weibo.com/javascriptdev" target="_blank" rel="external">@TheFrontEnd</a></td>
<td>#</td>
<td>JavaScript技术资讯、新闻、教程、深度文章。</td>
</tr>
<tr>
<td><a href="http://weibo.com/fekb" target="_blank" rel="external">@前端快爆</a></td>
<td>阿里巴巴</td>
<td>有HTML5、CSS3、JS</td>
</tr>
<tr>
<td><a href="http://e.weibo.com/html5cn" target="_blank" rel="external">@HTML5中国</a></td>
<td>#</td>
<td>中国www.html5cn.org官方微博</td>
</tr>
</tbody>
</table>
<h5 id="开发者博客"><a href="#开发者博客" class="headerlink" title="开发者博客"></a>开发者博客</h5><p>微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。</p>
<h5 id="国内开发者"><a href="#国内开发者" class="headerlink" title="国内开发者"></a>国内开发者</h5><p>国内开发者一块欢迎大家 <code>Fork</code>提交推荐，最好能推荐一些在前端界较活跃的的开发者。</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>博客</th>
<th>微博</th>
<th>Github</th>
<th>Twitter</th>
<th>公司</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>阮一峰</td>
<td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰博客</a></td>
<td><a href="http://weibo.com/ruanyf" target="_blank" rel="external">@ruanyf</a></td>
<td>#</td>
<td><a href="https://twitter.com/ruanyf" target="_blank" rel="external">@ruanyf</a></td>
<td>上海金融学院国际金融学院</td>
<td>教师，博客写作人，翻译人，《黑客与画家》的译者</td>
</tr>
<tr>
<td>老赵</td>
<td><a href="http://blog.zhaojie.me/" target="_blank" rel="external">http://blog.zhaojie.me/</a></td>
<td><a href="http://weibo.com/jeffz" target="_blank" rel="external">@老赵</a></td>
<td>#</td>
<td><a href="">#</a></td>
<td>摩根大通（香港）</td>
<td>资深码农</td>
</tr>
<tr>
<td>玉伯</td>
<td><a href="http://lifesinger.wordpress.com/" target="_blank" rel="external">岁月如歌</a></td>
<td><a href="http://weibo.com/lifesinger" target="_blank" rel="external">@玉伯也叫射雕</a></td>
<td><a href="https://github.com/lifesinger" target="_blank" rel="external">@lifesinger</a></td>
<td><a href="https://twitter.com/lifesinger" target="_blank" rel="external">@lifesinger</a></td>
<td>支付宝</td>
<td>大牛</td>
</tr>
<tr>
<td>kejun</td>
<td><a href="http://hikejun.com/" target="_blank" rel="external">http://hikejun.com/</a></td>
<td><a href="http://weibo.com/kejunz" target="_blank" rel="external">@kejunz</a></td>
<td><a href="https://github.com/kejun" target="_blank" rel="external">@kejunz</a></td>
<td>#</td>
<td>豆瓣</td>
<td>前端大神</td>
</tr>
<tr>
<td>寒冬winter</td>
<td><a href="http://winter-cn.cnblogs.com/" target="_blank" rel="external">winter-cn</a></td>
<td><a href="http://weibo.com/wintercn" target="_blank" rel="external">@寒冬winter</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
</tr>
<tr>
<td>左耳朵耗子</td>
<td><a href="http://coolshell.cn/" target="_blank" rel="external">酷壳</a></td>
<td><a href="http://weibo.com/haoel" target="_blank" rel="external">@左耳朵耗子</a></td>
<td>#</td>
<td><a href="https://twitter.com/haoel" target="_blank" rel="external">@haoel</a></td>
<td>淘宝</td>
<td>#</td>
</tr>
<tr>
<td>fool2fish</td>
<td>#</td>
<td><a href="http://weibo.com/fool2fish" target="_blank" rel="external">@fool2fish</a></td>
<td>#</td>
<td>#</td>
<td>支付宝</td>
<td>#</td>
</tr>
<tr>
<td>朴灵</td>
<td><a href="http://html5ify.com/" target="_blank" rel="external">Html5fiy</a></td>
<td><a href="http://weibo.com/shyvo" target="_blank" rel="external">@朴灵</a></td>
<td><a href="https://github.com/JacksonTian" target="_blank" rel="external">JacksonTian</a></td>
<td>#</td>
<td>阿里巴巴</td>
<td>《深入浅出Node.js》作者,大牛</td>
</tr>
<tr>
<td>Cat Chen</td>
<td><a href="http://catchen.biz/home.zh-CN.html" target="_blank" rel="external">陈广琛</a></td>
<td><a href="http://weibo.com/u/1640352230" target="_blank" rel="external">@CatChen</a></td>
<td><a href="https://github.com/CatChen" target="_blank" rel="external">@CatChen</a></td>
<td><a href="https://twitter.com/CatChen" target="_blank" rel="external">@CatChen</a></td>
<td>Facebook</td>
<td>大牛</td>
</tr>
<tr>
<td>BYVod</td>
<td><a href="https://www.byvoid.com/" target="_blank" rel="external">Beyond the Void</a></td>
<td><a href="http://weibo.com/byvoid" target="_blank" rel="external">@BYVoid</a></td>
<td><a href="https://github.com/BYVoid" target="_blank" rel="external">@byvoid</a></td>
<td><a href="https://twitter.com/byvoid" target="_blank" rel="external">@BYVoid</a></td>
<td>Facebook 英国</td>
<td>《Node.js 开发指南》作者,大牛</td>
</tr>
<tr>
<td>郭宇</td>
<td><a href="http://blog.guoyu.me/" target="_blank" rel="external">Einmal ist keinmal</a></td>
<td><a href="http://weibo.com/137601206" target="_blank" rel="external">@郭宇</a></td>
<td><a href="https://github.com/turingou" target="_blank" rel="external">@turingou</a></td>
<td><a href="https://twitter.com/turingou" target="_blank" rel="external">@turingou</a></td>
<td>糗事百科,原支付宝</td>
<td>Node.js</td>
</tr>
<tr>
<td>勾三股四</td>
<td>#</td>
<td><a href="http://weibo.com/mx006" target="_blank" rel="external">@勾三股四</a></td>
<td>#</td>
<td>#</td>
<td>淘宝</td>
<td>#</td>
</tr>
<tr>
<td>cnberg</td>
<td><a href="http://cnberg.com" target="_blank" rel="external">冰山一角</a></td>
<td><a href="http://weibo.com/berg" target="_blank" rel="external">@berg</a></td>
<td>@cnberg</td>
<td><a href="">@cnberg</a></td>
<td>百度</td>
<td>骑行</td>
</tr>
<tr>
<td>大猫</td>
<td><a href="http://bigc.at" target="_blank" rel="external">意淫笔记</a></td>
<td><a href="http://weibo.com/daemao" target="_blank" rel="external">@daemao</a></td>
<td><a href="https://github.com/Damao" target="_blank" rel="external">@Damao</a></td>
<td><a href="https://twitter.com/13igcat" target="_blank" rel="external">@13igcat</a></td>
<td>腾讯</td>
<td><a href="http://www.zhihu.com/people/13igcat" target="_blank" rel="external">知乎</a></td>
</tr>
<tr>
<td>hzlzh</td>
<td><a href="https://zlz.im" target="_blank" rel="external">自力博客</a></td>
<td><a href="http://weibo.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td><a href="http://twitter.com/hzlzh" target="_blank" rel="external">@hzlzh</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>C7210</td>
<td>beforweb.com/</td>
<td><a href="http://weibo.com/c7210" target="_blank" rel="external">@C7210</a></td>
<td><a href="http://twittercom/hzlzh" target="_blank" rel="external">@C7210</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">@C7210</a></td>
<td>#</td>
<td>UX、交互设计师、视觉与前端</td>
</tr>
<tr>
<td>kejun</td>
<td><a href="http://hikejun.com/" target="_blank" rel="external">http://hikejun.com/</a></td>
<td><a href="http://weibo.com/kejun" target="_blank" rel="external">#</a></td>
<td><a href="http://twittercom/kejun" target="_blank" rel="external">#</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">#</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>张鑫旭</td>
<td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="external">张鑫旭博客</a></td>
<td><a href="http://weibo.com/zhangxinxu" target="_blank" rel="external">@张鑫旭</a></td>
<td><a href="https://github.com/zhangxinxu" target="_blank" rel="external">@zhangxinxu</a></td>
<td><a href="https://twitter.com/zhangxinxu" target="_blank" rel="external">@zhangxinxu</a></td>
<td>腾讯 上海 ISUX</td>
<td>前端开发</td>
</tr>
<tr>
<td>lucifr</td>
<td><a href="http://lucifr.com/" target="_blank" rel="external">http://lucifr.com/</a></td>
<td><a href="http://weibo.com/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td><a href="http://twittercom/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td><a href="http://github.com/lucifr" target="_blank" rel="external">@lucifr</a></td>
<td>#</td>
<td>Mac,ios</td>
</tr>
<tr>
<td>smallni</td>
<td><a href="http://www.smallni.com/" target="_blank" rel="external">http://www.smallni.com/</a></td>
<td><a href="http://weibo.com/hzlzh" target="_blank" rel="external">#</a></td>
<td><a href="https://twitter.com/smallniding/" target="_blank" rel="external">@Smallni</a></td>
<td><a href="http://github.com/hzlzh" target="_blank" rel="external">#</a></td>
<td>腾讯</td>
<td>前端开发</td>
</tr>
<tr>
<td>TQ</td>
<td><a href="http://targetkiller.net/" target="_blank" rel="external">http://targetkiller.net/</a></td>
<td><a href="http://weibo.com/targetkiller" target="_blank" rel="external">@Piser-TQ</a></td>
<td><a href="https://twitter.com/tqtan/" target="_blank" rel="external">@tqtan</a></td>
<td><a href="https://github.com/targetkiller" target="_blank" rel="external">@targetkiller</a></td>
<td>腾讯 ISUX</td>
<td>网页重构</td>
</tr>
<tr>
<td>LOO2K</td>
<td><a href="http://loo2k.com/blog/" target="_blank" rel="external">LOO2K</a></td>
<td><a href="http://weibo.com/loo2k" target="_blank" rel="external">@LOO2K</a></td>
<td><a href="https://github.com/loo2k" target="_blank" rel="external">LOO2K</a></td>
<td><a href="https://twitter.com/loo2k/" target="_blank" rel="external">LOO2K</a></td>
<td>墨筹网</td>
<td>少年才俊</td>
</tr>
<tr>
<td>qiqiboy</td>
<td><a href="http://www.qiqiboy.com/" target="_blank" rel="external">qiqiboy</a></td>
<td><a href="http://weibo.com/qiqiboy" target="_blank" rel="external">@qiqiboy</a></td>
<td>#</td>
<td>#</td>
<td>金山网络 UX</td>
<td>吐槽清理大师开发者</td>
</tr>
<tr>
<td>foru17</td>
<td><a href="http://luolei.org" target="_blank" rel="external">罗磊的独立博客</a></td>
<td><a href="http://weibo.com/foru17" target="_blank" rel="external">@罗罗磊磊</a></td>
<td><a href="https://github.com/foru17" target="_blank" rel="external">@foru17</a></td>
<td><a href="https://twitter.com/foru17" target="_blank" rel="external">@foru17</a></td>
<td></td>
<td>打酱油的</td>
</tr>
<tr>
<td>周爱民</td>
<td><a href="http://blog.csdn.net/aimingoo/" target="_blank" rel="external">aimingoo专栏</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>支付宝</td>
<td>JavaScript语言精髓与编程实践作者</td>
</tr>
<tr>
<td>hax</td>
<td><a href="http://hax.iteye.com/" target="_blank" rel="external">hax的技术部落格</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端大牛</td>
</tr>
<tr>
<td>三生石上</td>
<td><a href="http://www.cnblogs.com/sanshi" target="_blank" rel="external">三生石上</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>js秘密花园译者</td>
</tr>
<tr>
<td>司徒正美</td>
<td><a href="http://www.cnblogs.com/rubylouvre" target="_blank" rel="external">Ruby’s Louvre</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端开发</td>
</tr>
<tr>
<td>叶小钗</td>
<td><a href="http://www.cnblogs.com/yexiaochai" target="_blank" rel="external">叶小钗</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端开发</td>
</tr>
<tr>
<td>聂微东</td>
<td><a href="http://www.cnblogs.com/Darren_code/" target="_blank" rel="external">Darren</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>百度移动云</td>
<td>前端开发</td>
</tr>
<tr>
<td>当耐特</td>
<td><a href="http://www.cnblogs.com/iamzhanglei/" target="_blank" rel="external">iamzhanglei</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>HTML5实验室作者</td>
</tr>
<tr>
<td>教主</td>
<td><a href="http://www.cnblogs.com/_franky" target="_blank" rel="external">_frank</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>又一牛</td>
</tr>
<tr>
<td>typeof</td>
<td><a href="http://typeof.net/" target="_blank" rel="external">typeof</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>又一牛</td>
</tr>
<tr>
<td>Gray Zhang</td>
<td><a href="http://www.cnblogs.com/GrayZhang" target="_blank" rel="external">Gray Zhang</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>百度一牛</td>
</tr>
<tr>
<td>李松峰</td>
<td><a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>高程2等书的译者</td>
</tr>
<tr>
<td>小鱼</td>
<td><a href="http://sofish.de/" target="_blank" rel="external">sofish</a></td>
<td><a href="http://weibo.com/sofish" target="_blank" rel="external">@sofish</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>饿了么前端Leader</td>
</tr>
<tr>
<td>vilic</td>
<td><a href="http://vilic.info/" target="_blank" rel="external">vilic</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>年轻一牛</td>
</tr>
<tr>
<td>彬Go</td>
<td><a href="http://blog.bingo929.com/" target="_blank" rel="external">彬Go</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>人人网一牛</td>
</tr>
<tr>
<td>PuterJam</td>
<td><a href="http://www.pjhome.net" target="_blank" rel="external">PuterJam’s Blog</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>css森林</td>
<td><a href="http://www.cssforest.org" target="_blank" rel="external">cssforest</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>前端博客</td>
</tr>
<tr>
<td>99css</td>
<td><a href="http://www.99css.com/" target="_blank" rel="external">99css</a></td>
<td><a href="http://weibo.com/ytzong" target="_blank" rel="external">@ytzong</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>秦歌</td>
<td><a href="http://dancewithnet.com/" target="_blank" rel="external">Kaven</a></td>
<td>#</td>
<td><a href="http://twitter.com/kavenyan" target="_blank" rel="external">@kavenyan</a></td>
<td>#</td>
<td>#</td>
<td>js语言精粹译者</td>
</tr>
<tr>
<td>linxz</td>
<td><a href="http://www.linxz.de/" target="_blank" rel="external">linxz</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>css那些事儿的作者</td>
</tr>
<tr>
<td>米随随</td>
<td><a href="http://s5s5.me/" target="_blank" rel="external">米随随</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯ISUX 一牛</td>
</tr>
<tr>
<td>飘飘</td>
<td><a href="http://pufen.net/" target="_blank" rel="external">飘飘</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>腾讯一牛</td>
</tr>
<tr>
<td>Along</td>
<td><a href="http://jinlong.github.io/" target="_blank" rel="external">Along’s Blog</a></td>
<td><a href="http://weibo.com/newwave" target="_blank" rel="external">@newwave</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>Opera 欧朋一牛</td>
</tr>
<tr>
<td>安记</td>
<td><a href="http://www.cssha.com/" target="_blank" rel="external">cssha</a></td>
<td><a href="http://weibo.com/hanan321" target="_blank" rel="external">@hanan321</a></td>
<td><a href="https://github.com/hanan198501" target="_blank" rel="external">hanan198501</a></td>
<td>#</td>
<td>#</td>
<td>去哪网一牛</td>
</tr>
<tr>
<td>余弦</td>
<td><a href="http://evilcos.me/" target="_blank" rel="external">EVILCOS</a></td>
<td><a href="http://weibo.com/evilcos" target="_blank" rel="external">余弦</a></td>
<td><a href="https://github.com/evilcos" target="_blank" rel="external">evilcos</a></td>
<td>#</td>
<td><a href="http://www.knownsec.com/" target="_blank" rel="external">知道创宇</a></td>
<td>安全（黑客）、架构、团队的各种观点与分享</td>
<td>#</td>
<td><a href="http://dbanotes.net/" target="_blank" rel="external">冯大辉</a></td>
<td>现在就职于丁香园 (<a href="http://dxy.cn" target="_blank" rel="external">http://dxy.cn</a>) ，担任技术团队负责人.</td>
</tr>
<tr>
<td>汤姆大叔</td>
<td><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external">汤姆大叔的博客</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>《深入理解Bootstrap》、《JavaScript启示录》、《JavaScript设计模式》等多本前端书籍翻译作者</td>
</tr>
<tr>
<td>屈光宇</td>
<td><a href="https://imququ.com/" target="_blank" rel="external">Jerry Qu的小站</a></td>
<td><a href="http://weibo.com/jerryqu" target="_blank" rel="external">屈光宇</a></td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>奇虎360前端，对WEB性能研究很深入</td>
</tr>
</tbody>
</table>
<h5 id="一些社区"><a href="#一些社区" class="headerlink" title="一些社区"></a>一些社区</h5><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>V2EX</td>
<td><a href="http://v2ex.com/" target="_blank" rel="external">http://v2ex.com/</a></td>
<td>小众活跃社区</td>
</tr>
<tr>
<td>知乎</td>
<td><a href="http://www.zhihu.com/" target="_blank" rel="external">http://www.zhihu.com/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>前端乱炖</td>
<td><a href="http://www.html-js.com/" target="_blank" rel="external">http://www.html-js.com/</a></td>
<td>专业的前端知识平台</td>
</tr>
<tr>
<td>segmentfault</td>
<td><a href="http://segmentfault.com/" target="_blank" rel="external">http://segmentfault.com/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>果壳问答</td>
<td><a href="http://www.guokr.com/ask/pending/" target="_blank" rel="external">http://www.guokr.com/ask/pending/</a></td>
<td>综合问答社区</td>
</tr>
<tr>
<td>Ruby</td>
<td><a href="http://ruby-china.org/" target="_blank" rel="external">http://ruby-china.org/</a></td>
<td>同 V2EX 氛围类似，不局限于Ruby</td>
</tr>
<tr>
<td>Node.js 中文社区</td>
<td><a href="http://cnodejs.org/" target="_blank" rel="external">http://cnodejs.org/</a></td>
<td>Node.js 国内最活跃的社区</td>
</tr>
<tr>
<td>Code Wall</td>
<td><a href="https://coderwall.com/" target="_blank" rel="external">https://coderwall.com/</a></td>
<td>国外技术社区</td>
</tr>
<tr>
<td>DIV.IO</td>
<td><a href="http://div.io/" target="_blank" rel="external">http://div.io/</a></td>
<td>国内前端技术社区</td>
</tr>
<tr>
<td>w3ctech</td>
<td><a href="http://www.w3ctech.com/" target="_blank" rel="external">http://www.w3ctech.com/</a></td>
<td>国内前端技术社区，常有一些线下活动发布</td>
</tr>
</tbody>
</table>
<h5 id="企业官方博客"><a href="#企业官方博客" class="headerlink" title="企业官方博客"></a>企业官方博客</h5><p>在开头我的 Feedly 订阅 opml 文件里比较全面。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>公司</th>
<th>部门</th>
<th>活跃度</th>
<th>简介</th>
<th>微博</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://isux.tencent.com/" target="_blank" rel="external">ISUX 社交用户体验设计</a></td>
<td>腾讯</td>
<td>ISUX</td>
<td>★★★★☆</td>
<td>负责腾讯的社交网络相关产品的用户体验设计与研究。</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://cdc.tencent.com/" target="_blank" rel="external">腾讯 CDC</a></td>
<td>腾讯</td>
<td>CDC</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯Web前端 Alloy 团队 Blog</a></td>
<td>腾讯</td>
<td>SNG</td>
<td>★★★★☆</td>
<td>主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。</td>
<td><a href="http://weibo.com/alloyteam" target="_blank" rel="external">alloyteam</a></td>
</tr>
<tr>
<td><a href="http://tid.tenpay.com/" target="_blank" rel="external">TID-财付通设计中心</a></td>
<td>腾讯</td>
<td>TID</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://mxd.tencent.com/" target="_blank" rel="external">腾讯MXD移动互联网设计中心</a></td>
<td>腾讯</td>
<td>MXD</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://e.t.qq.com/tencent_mxd" target="_blank" rel="external">@腾讯MXD</a></td>
</tr>
<tr>
<td><a href="http://fed.renren.com/" target="_blank" rel="external">人人网FED Team</a></td>
<td>人人网</td>
<td>FED</td>
<td>★★★★☆</td>
<td>简介</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://udc.weibo.com/" target="_blank" rel="external">微博UDC</a></td>
<td>新浪</td>
<td>UDC</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">@微博UDC设计中心</a></td>
</tr>
<tr>
<td><a href="http://ued.sina.com.cn/" target="_blank" rel="external">新浪UED</a></td>
<td>新浪</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">#</a></td>
</tr>
<tr>
<td><a href="http://uedc.163.com/" target="_blank" rel="external">网易用户体验设计中心</a></td>
<td>网易</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/sudc" target="_blank" rel="external">#</a></td>
</tr>
<tr>
<td><a href="http://www.aliued.cn/" target="_blank" rel="external">阿里巴巴（中国站）用户体验设计部博客</a></td>
<td>阿里巴巴</td>
<td>UED</td>
<td>★★★★☆</td>
<td>简介</td>
<td><a href="http://weibo.com/aliued" target="_blank" rel="external">@Alibaba-UED</a></td>
</tr>
<tr>
<td><a href="http://ued.ctrip.com/blog/" target="_blank" rel="external">携程UED-携程旅行前端开发团队</a></td>
<td>携程网</td>
<td>UED</td>
<td>★★★☆☆</td>
<td>携程UED,携程前端开发团队,UED,Javascript,重构,ux</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://fex.baidu.com/" target="_blank" rel="external">百度FEX</a></td>
<td>百度</td>
<td>FEX</td>
<td>★★★★☆</td>
<td>百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://ued.taobao.org/blog/" target="_blank" rel="external">淘宝UED</a></td>
<td>淘宝网</td>
<td>UED</td>
<td>★★★★☆</td>
<td>用户体验、交互设计、视觉设计、前端技术博客</td>
<td><a href="http://weibo.com/taobaoued" target="_blank" rel="external">@淘宝UED</a></td>
</tr>
</tbody>
</table>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><table>
<thead>
<tr>
<th>名称</th>
<th>作者</th>
<th>价格</th>
<th>出版社</th>
<th>简评</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://book.douban.com/subject/3327829/" target="_blank" rel="external">Web标准设计</a></td>
<td>刘杰（嗷嗷）</td>
<td>RMB 60.00</td>
<td>清华大学出版社</td>
<td>基础入门</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4914146/" target="_blank" rel="external">大巧不工 : Web前端设计修炼之道</a></td>
<td>赖定清 / 林坚</td>
<td>RMB 59.00</td>
<td>机械工业出版社</td>
<td>适合入门，了解前端全局</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3132277/" target="_blank" rel="external">高性能网站建设指南:前端工程师技能精髓</a></td>
<td>Steve Souders</td>
<td>RMB 35.00</td>
<td>电子工业出版社</td>
<td>能从原理层理解各种方法</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4719162/" target="_blank" rel="external">高性能网站建设指南:Web开发者性能优化最佳实践</a></td>
<td>Steve Souders</td>
<td>RMB 49.80</td>
<td>电子工业出版社</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/4124141/" target="_blank" rel="external">Web站点优化 : Web站点优化</a></td>
<td>金</td>
<td>RMB 55.00</td>
<td>#</td>
<td>#</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/10789820/" target="_blank" rel="external">Node.js开发指南</a></td>
<td>郭家寶</td>
<td>RMB 45.00</td>
<td>#</td>
<td>作者很牛</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计</a></td>
<td>Nicholas C. Zakas</td>
<td>RMB 99.00</td>
<td>人民邮电出版社</td>
<td>适合没事就翻翻</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="external">JavaScript权威指南</a></td>
<td>弗拉纳根</td>
<td>RMB 109.00</td>
<td>机械工业出版社</td>
<td>犀牛书</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external">JavaScript语言精粹</a></td>
<td>Douglas Crockford</td>
<td>RMB 35.00</td>
<td>电子工业出版社</td>
<td>绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出node.js</a></td>
<td>朴灵</td>
<td>RMB 69.00</td>
<td>人民邮电出版社</td>
<td>一本从前端通往全端的好书</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/3137282/" target="_blank" rel="external">CSS开发王</a></td>
<td>张亚飞</td>
<td>RMB 49.00</td>
<td>电子工业出版社</td>
<td>适合有一定基础后CSS进阶用</td>
</tr>
<tr>
<td><a href="http://book.douban.com/subject/6038371/" target="_blank" rel="external">JavaScript DOM编程艺术</a></td>
<td>Jeremy Keith /Jeffrey Sambells</td>
<td>RMB 49.00</td>
<td>人民邮电出版社</td>
<td>适合Javascript入门看</td>
</tr>
</tbody>
</table>
<p>=======</p>
<h5 id="线上的一些翻译版好书"><a href="#线上的一些翻译版好书" class="headerlink" title="线上的一些翻译版好书"></a>线上的一些翻译版好书</h5><table>
<thead>
<tr>
<th>书名</th>
<th>地址</th>
<th>作者</th>
<th>译者</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript秘密花园</td>
<td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></td>
<td>伊沃·韦特泽尔&amp;张易江</td>
<td><a href="http://sanshi.me/" target="_blank" rel="external">三生石上</a></td>
<td>完整书籍，界面美观，有详细demo</td>
</tr>
<tr>
<td>Material Design 中文版</td>
<td><a href="http://design.1sters.com/" target="_blank" rel="external">http://design.1sters.com/</a></td>
<td>Google设计手册</td>
<td>协同翻译</td>
<td>Google I/O 2014 发布的 Material Design 官方手册的中文翻译</td>
</tr>
</tbody>
</table>
<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p>======</p>
<p>本 repo 会 不断更新，感谢推荐和分享新资源的朋友。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;&quot;&gt;https://github.com/foru17/front-end-collect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在前端路上摸索前行，在这里分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者。欢迎更新，以下各排名不分先后顺序。&lt;/p&gt;

    
    </summary>
    
      <category term="Resources" scheme="http://blog.dongderu.net/categories/Resources/"/>
    
    
      <category term="bookmark" scheme="http://blog.dongderu.net/tags/bookmark/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>如何显示已过滤的ng-repeat数据的长度</title>
    <link href="http://blog.dongderu.net/2015/02/24/2015-2-24-how-to-display-length-of-filtered-ng-repeat-data/"/>
    <id>http://blog.dongderu.net/2015/02/24/2015-2-24-how-to-display-length-of-filtered-ng-repeat-data/</id>
    <published>2015-02-24T08:28:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/15316363/how-to-display-length-of-filtered-ng-repeat-data</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>楼主有一个数组，包含了许多对象（JSON格式）。以下假设为数组的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [</div><div class="line">  &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Jim"</span>,</div><div class="line">    <span class="string">"age"</span> : <span class="number">25</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Jerry"</span>,</div><div class="line">    <span class="string">"age"</span>: <span class="number">27</span></div><div class="line">  &#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>接下来通过以下方式展示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"person in data | filter: query"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这里，通过一个输入框执行查询来筛选显示的内容。<br>楼主需要在另一处显示当前人员的数量，例如：<code>Showing  Persons</code>。</p>
<p>楼主想要达到的目的是当一个用户搜索人员时，数据根据搜索条件显示，显示当前人员总数的Showing…persons一并变化。但是现在不行。这里总是显示所有人员的总数而不是被筛选后的数值。那么问题来了，如何才能获取被筛选数据的总数呢？</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><h3 id="针对Angular1-3"><a href="#针对Angular1-3" class="headerlink" title="针对Angular1.3+"></a>针对Angular1.3+</h3><p>使用alias表达式（文档：<a href="https://code.angularjs.org/1.3.0/docs/api/ng/directive/ngRepeat" target="_blank" rel="external">Angular 1.3.0</a>，往下翻找到Arguments章节）：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"person in data | filter:query as filtered"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="针对Angular1-3之前版本"><a href="#针对Angular1-3之前版本" class="headerlink" title="针对Angular1.3之前版本"></a>针对Angular1.3之前版本</h3><p>将结果赋值给一个新的变量，（例如：<code>filtered</code>）然后再用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"person in filtered = (data | filter: query)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>显示结果的个数：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Showing &#123;&#123;filtered.length&#125;&#125; Persons</div></pre></td></tr></table></figure></p>
<p>查看类似的<a href="http://jsfiddle.net/joshkurz/Nk8qy/3/" target="_blank" rel="external">例子</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>在线前端代码编辑器，支持实时效果预览</title>
    <link href="http://blog.dongderu.net/2015/02/11/2015-2-12-simple-html-css-editor-in-browser-with-previews/"/>
    <id>http://blog.dongderu.net/2015/02/11/2015-2-12-simple-html-css-editor-in-browser-with-previews/</id>
    <published>2015-02-11T16:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>1.<a href="">http://www.codecast.me/</a><br><img src="http://www.codecast.me/img/codecast_screenshot.png" alt=""></p>
</li>
<li><p>2.<a href="">http://jsbin.com/</a><br><img src="https://ooo.0o0.ooo/2016/10/17/58047ed20d11b.png" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.&lt;a href=&quot;&quot;&gt;http://www.codecast.me/&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://www.codecast.me/img/codecast_screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Resources" scheme="http://blog.dongderu.net/categories/Resources/"/>
    
    
      <category term="bookmark" scheme="http://blog.dongderu.net/tags/bookmark/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>一个不错的基于yeoman的angularjs生成器</title>
    <link href="http://blog.dongderu.net/2014/12/10/generator-gulp-ng-fast/"/>
    <id>http://blog.dongderu.net/2014/12/10/generator-gulp-ng-fast/</id>
    <published>2014-12-10T05:04:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><p><a href="">https://github.com/rchampourlier/generator-gulp-ng-fast</a></p>
<p>##介绍<br>这是一个基于yeoman的生成器，用于生成一个基于<a href="https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub" target="_blank" rel="external">一个Angular应用的最佳实践的推荐模式</a>。它以<a href="Jessie Evangelista">Jessie Evangelista</a>编写的<a href="https://github.com/henyojess" target="_blank" rel="external">generator-gulp-ng</a>组件为基础，附加了针对Coffeescript、Less和Jade的支持，提供了更……加快速的开发模式。<br>使用Gulp吧！(JS构建工具有足够的说服力！)，还有Bower和NPM。</p>
<h2 id="生成的目录结构"><a href="#生成的目录结构" class="headerlink" title="生成的目录结构"></a>生成的目录结构</h2><pre><code>app/
  components/
    app_service.js
    app_service_test.js
  main/
    main.html
    main_controller.js
    main_controller_test.js
  app.css
  app.js
  app_controller.js
  app_controller_test.js
  index.html
bower_components/
node_modules/
.bowerrc
.gitignore
README.md
bower.json
gulpgile.js
karma-unit.js
package.json
</code></pre><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>遵循建议的AngularJS项目结构的最佳实践。</li>
<li>所有应用目录内的Coffee/JS文件均被编译和拼接，置入<code>build/app.js</code>文件中。</li>
<li>所有除了<code>index.html</code>之外的应用文件夹内Jade/HTML文件均被拼接和编译，置入 <code>build/templates.js</code>文件，且被加载至AngularJS的<code>templateCache</code>。</li>
<li>所有应用目录内的Less/CSS文件均被拼接置入<code>build/app.css</code>文件。</li>
<li>所以在<code>bower_components</code>文件夹内的JS文件均被拼接至<code>build/lib.js</code>文件。</li>
<li>所有在<code>bower_components</code>文件夹内的CSS文件均被拼接至<code>build/lib.css</code>文件。</li>
<li><code>index.jade</code>/<code>index.html</code>文件被编译且复制到<code>build/index.html</code>文件中。</li>
<li>一个运行在9000端口的静态web服务器，支持livereload。</li>
<li>当任一在build文件夹内的HTML, JS或CSS文件发生变动，浏览器将会自动刷新。</li>
<li>当关联文件发生变化时，Karma测试运行器会自动执行单元测试。 </li>
</ul>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul>
<li>node.js <a href="">http://nodejs.org/</a></li>
<li>npm <a href="">http://www.npmjs.org/</a></li>
<li>bower <a href="">http://bower.io/</a></li>
<li>gulp.js <a href="">http://gulpjs.com/</a></li>
<li>karma-cli <a href="">http://karma-runner.github.io/</a></li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre><code>npm install -g generator-gulp-ng-fast
mkdir my-app &amp;&amp; cd my-app &amp;&amp; yo gulp-ng-fast
npm install
npm install -g karma-cli
bower install
gulp
karma start karma-unit.js
</code></pre><p>然后打开浏览器访问<code>http://localhost:9000</code>开始干活。</p>
<h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><p>如有问题或疑问请至<a href="">https://github.com/rchampourlier/generator-gulp-ng-fast/issues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github地址&quot;&gt;&lt;a href=&quot;#Github地址&quot; class=&quot;headerlink&quot; title=&quot;Github地址&quot;&gt;&lt;/a&gt;Github地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;https://github.com/rchampourlier/ge
    
    </summary>
    
      <category term="Documentation" scheme="http://blog.dongderu.net/categories/Documentation/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="yeoman" scheme="http://blog.dongderu.net/tags/yeoman/"/>
    
      <category term="gulp" scheme="http://blog.dongderu.net/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS文件上传</title>
    <link href="http://blog.dongderu.net/2014/11/15/angularjs-service-file-upload/"/>
    <id>http://blog.dongderu.net/2014/11/15/angularjs-service-file-upload/</id>
    <published>2014-11-15T07:08:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jsfiddle地址"><a href="#jsfiddle地址" class="headerlink" title="jsfiddle地址"></a>jsfiddle地址</h2><p><a href="">http://jsfiddle.net/JeJenny/ZG9re/</a></p>
<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span> = <span class="string">"myCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">file-model</span>=<span class="string">"myFile"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"uploadFile()"</span>&gt;</span>upload me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="javascript代码"><a href="#javascript代码" class="headerlink" title="javascript代码"></a>javascript代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, []);</div><div class="line"></div><div class="line">myApp.directive(<span class="string">'fileModel'</span>, [<span class="string">'$parse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$parse</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'A'</span>,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> model = $parse(attrs.fileModel);</div><div class="line">            <span class="keyword">var</span> modelSetter = model.assign;</div><div class="line">            </div><div class="line">            element.bind(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    modelSetter(scope, element[<span class="number">0</span>].files[<span class="number">0</span>]);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.service(<span class="string">'fileUpload'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$http</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.uploadFileToUrl = <span class="function"><span class="keyword">function</span>(<span class="params">file, uploadUrl</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">        fd.append(<span class="string">'file'</span>, file);</div><div class="line">        $http.post(uploadUrl, fd, &#123;</div><div class="line">            <span class="attr">transformRequest</span>: angular.identity,</div><div class="line">            <span class="attr">headers</span>: &#123;<span class="string">'Content-Type'</span>: <span class="literal">undefined</span>&#125;</div><div class="line">        &#125;)</div><div class="line">        .success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        &#125;)</div><div class="line">        .error(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'myCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'fileUpload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, fileUpload</span>)</span>&#123;</div><div class="line">    </div><div class="line">    $scope.uploadFile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> file = $scope.myFile;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'file is '</span> );</div><div class="line">        <span class="built_in">console</span>.dir(file);</div><div class="line">        <span class="keyword">var</span> uploadUrl = <span class="string">"/fileUpload"</span>;</div><div class="line">        fileUpload.uploadFileToUrl(file, uploadUrl);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">&#125;]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jsfiddle地址&quot;&gt;&lt;a href=&quot;#jsfiddle地址&quot; class=&quot;headerlink&quot; title=&quot;jsfiddle地址&quot;&gt;&lt;/a&gt;jsfiddle地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://jsfiddle.net/JeJenny
    
    </summary>
    
      <category term="Practice" scheme="http://blog.dongderu.net/categories/Practice/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="jsfiddle" scheme="http://blog.dongderu.net/tags/jsfiddle/"/>
    
  </entry>
  
  <entry>
    <title>如何使用underscore.js做正序和倒虚排序</title>
    <link href="http://blog.dongderu.net/2014/11/14/how-can-i-do-an-asc-and-desc-sort-using-underscore-js/"/>
    <id>http://blog.dongderu.net/2014/11/14/how-can-i-do-an-asc-and-desc-sort-using-underscore-js/</id>
    <published>2014-11-14T11:28:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/15137948/how-can-i-do-an-asc-and-desc-sort-using-underscore-js#</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>楼主正在用underscorejs来对我的json数据进行排序。现在需要对数据进行正序和倒序的排序。我查了文档，但是没有找到什么相关内容。怎么搞定这个问题？</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><p>你可以用<a href="http://underscorejs.org/#sortBy" target="_blank" rel="external">_.sortby</a>，它始终返回一个正序的排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.sortBy([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;); <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>你也可以使用<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="external">.reverse</a>方法来得到倒序排序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = _.sortBy([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [1, 2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(array.reverse()); <span class="comment">// [3, 2, 1]</span></div></pre></td></tr></table></figure>
<p>或者在处理数字时给数字加一个负号来得到倒序的列表。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.sortBy([<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>], <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> -num;</div><div class="line">&#125;); <span class="comment">// [3, 2, 1, 0, -1, -2, -3]</span></div></pre></td></tr></table></figure>
<p>再深入解释一下，<a href="http://underscorejs.org/#sortBy" target="_blank" rel="external">.sortby</a>使用的是内建的<code>.sort([handler])</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Default is ascending:</span></div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>].sort(); <span class="comment">// [1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="comment">// But can be descending if you provide a sort handler:</span></div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="comment">// a = current item in array</span></div><div class="line">    <span class="comment">// b = next item in array</span></div><div class="line">    <span class="keyword">return</span> b - a;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
      <category term="underscore" scheme="http://blog.dongderu.net/tags/underscore/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS：angular-route与angular-ui-route的区别</title>
    <link href="http://blog.dongderu.net/2014/10/20/angularjs-difference-between-angular-route-and-angular-ui-router/"/>
    <id>http://blog.dongderu.net/2014/10/20/angularjs-difference-between-angular-route-and-angular-ui-router/</id>
    <published>2014-10-20T07:31:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/21023763/angularjs-difference-between-angular-route-and-angular-ui-router</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>楼主是AngularJS的新手。我觉得Angular有点意思所以准备在我的一个大项目中使用一下。我正在寻找合适的模块。<br>请问<code>ngRoute</code>(angular-route.js)与<code>ui-route</code>(angular-ui-router.js)这两个模块具体有什么区别。<br>在许多介绍文章中，当使用了<code>ngRoute</code>时，route被配置为<code>$routeProvider</code>。当使用<code>ui-route</code>时，route被配置为<code>$stateProvider</code>和<code>urlRouterProvider</code>。<br>这让我觉得有点不能理解。哪个模块在管理功能和扩展性上更好呢？</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><p><a href="https://github.com/angular-ui/ui-router" target="_blank" rel="external">ui-router</a>是一个第三方组件。它十分强大。它支持<code>ngRoute</code>的所有特性且不止于此。<br>下面是一些使用<code>ui-router</code>替换掉<code>ngRoute</code>的理由：</p>
<ul>
<li><code>ui-route</code>支持<a href="https://github.com/angular-ui/ui-router/wiki/Nested-States-%26-Nested-Views" target="_blank" rel="external">view嵌套</a>和<a href="https://github.com/angular-ui/ui-router/wiki/Multiple-Named-Views" target="_blank" rel="external">多命名视图</a>。这在大型APP中非常有用，因为可能会出现继承其他段落的页面。</li>
<li><code>ui-route</code>可以让你在基于状态名称的状态间进行强类型连接。在一处替换url会在其余定义了相同的<a href="http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.directive:ui-sref" target="_blank" rel="external">ui-sref</a>的地方进行同步更新。如果你要在大型APP中变更超链接，这会非常有用。</li>
<li>它还具备<a href="http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$stateProvider#methods_decorator" target="_blank" rel="external">装饰器</a>的概念。可以用来允许根据尝试访问的URL动态创建路由。这意味着你不需要手动指定所有路由。</li>
<li><a href="https://github.com/angular-ui/ui-router/wiki#state-manager" target="_blank" rel="external">states</a>可以让你映射和访问不同状态的不同信息，你可以通过<a href="https://github.com/angular-ui/ui-router/wiki/URL-Routing#stateparams-service" target="_blank" rel="external">$stateParams</a>轻松地在状态之间传递信息。</li>
<li>你可以很方便的通过在带有<a href="http://angular-ui.github.io/ui-router/site/#/api/ui.router.state.$state" target="_blank" rel="external">$state</a>（由<code>ui-route</code>提供）的模板中确认当前是否出于某个状态或父状态来调整UI元素（高亮当前状态的导航栏）。可以通过设置<code>$rootScope</code>在执行中暴露它。</li>
<li>本质上，<code>ui-route</code>是<code>ngRouter</code>的增强版，但是背后的实现不尽相同。这些增强的功能在大型应用中非常实用。</li>
</ul>
<p>更多信息：</p>
<ul>
<li>Github: <a href="">https://github.com/angular-ui/ui-router</a></li>
<li>文档：<ul>
<li>API 参考： <a href="">http://angular-ui.github.io/ui-router/site/#/api</a></li>
<li>指引：<a href="">https://github.com/angular-ui/ui-router/wiki</a></li>
</ul>
</li>
<li>常见问题：<a href="">https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions</a></li>
<li>示例项目：<a href="">http://angular-ui.github.io/ui-router/sample/#/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>在定义一个directive时，&#39;controller&#39;, &#39;link&#39;和&#39;compile&#39;的区别</title>
    <link href="http://blog.dongderu.net/2014/09/06/2014-9-6-difference-between-the-controller-link-and-compile-functions-when-defining-a-directive/"/>
    <id>http://blog.dongderu.net/2014/09/06/2014-9-6-difference-between-the-controller-link-and-compile-functions-when-defining-a-directive/</id>
    <published>2014-09-06T09:33:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/12546945/difference-between-the-controller-link-and-compile-functions-when-definin</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>一些地方在directive逻辑中使用了controller，有些则用了link。在angular主页上的tab例子中使用了controller，但是其他例子使用了link。这两者究竟有什么区别？</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><p>层主更全面地阐述了此问题并增加了compile功能的解释。</p>
<ul>
<li><code>compile</code>方法用于模板的DOM操作（例如：操作tElement = template element），之后将适用于所有关联对应directive的克隆模板的DOM操作。（如果你需要使用到link且定义了一个compile方法，此方法的返回值必须为link方法，因为如果定义了<code>compile</code>，<code>link</code>属性会被忽略）。</li>
<li><code>link</code>方法一般情况下用于注册监听的回调（例如：<code>$watch</code>在scope中的表达式），又或者是更新DOM（例如：操作iElement = individual instance element）。它将会在模板被克隆后执行。例如：在一个<code>&lt;li ng-repeat...&gt;</code>内，针对这个特定的li元素，link方法在模板(tElement)克隆后被执行后，<code>$watch</code>允许一个directive得到一个scope属性变更的推送（每个scope均与对应的示例相关联），可以让directive针对DOM写入最新的值。</li>
<li><code>controller</code>方法必须被用于其他directive需要与这个directive交互的情况下。例如：在angular官网上，pane directive需要将它自己添加到被tab directive维护下的scope中，此后tabs directive需要定义一个controller方法（想想API的调用方式）使pane的directive可以访问和调用。</li>
</ul>
<p>关于更深入的关于tabs和pane的directive的解释，以及为什么tab的directive在它的controller中使用<code>this</code>（而不是<code>$scope</code>）来创建方法，请参阅<a href="http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers/14168699#14168699" target="_blank" rel="external">‘this’ vs $scope in AngularJS controllers</a>。</p>
<p>总的来说，你可以在任何一个directive的controller或者link方法内使用方法，<code>$watches</code>，等等。controller会先执行，这有时候会很重要（可以参考这个<a href="http://jsfiddle.net/mrajcok/xfh3F/" target="_blank" rel="external">代码片段</a>，其中含有两个嵌套的directive，并执行其中的controller和link方法并将结果记入Log）。楼主可能需要的是将原本针对scope操作的的方法赛到某个controller内然后保证框架剩余部分的一致性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>快乐Node码农的十个习惯</title>
    <link href="http://blog.dongderu.net/2014/04/23/2014-4-23-nodejs-habits/"/>
    <id>http://blog.dongderu.net/2014/04/23/2014-4-23-nodejs-habits/</id>
    <published>2014-04-23T06:26:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://www.infoq.com/cn/articles/node.js-habits" target="_blank" rel="external">http://www.infoq.com/cn/articles/node.js-habits</a><br>从问世到现在将近20年，JavaScript一直缺乏其它有吸引力的编程语言，比如Python和Ruby，的很多优点：命令行界面，REPL，包管理器，以及组织良好的开源社区。感谢Node.js和npm，现如今的JavaScript鸟枪换炮了。Web开发者有了强大的新工具，接下来就看他们的想象力了。</p>
<p>下面这个提示和技巧清单，能让你和你的node程序保持快乐。</p>
<h2 id="用npm-init开始新项目"><a href="#用npm-init开始新项目" class="headerlink" title="用npm init开始新项目"></a>用npm init开始新项目</h2><p>npm有个init命令，可以引导你完成创建package.json文件的过程。即便你非常熟悉package.json和它的属性，也可以把npm init当作将你的新程序或模块导入正轨的简便办法。 它可以聪明地为你设置默认值，比如通过上层目录的名称推断模块名，从~/.npmrc中读取创作者的信息，以及用你的git设置确定代码库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir my-node-app</div><div class="line"><span class="built_in">cd</span> my-node-app</div><div class="line">npm init</div></pre></td></tr></table></figure>
<h2 id="声明所有依赖项"><a href="#声明所有依赖项" class="headerlink" title="声明所有依赖项"></a>声明所有依赖项</h2><p>在将模块安装到项目本地时坚持使用–save (或 –save-dev)是个好习惯。这些选项会将指定的模块添加到package.json的dependencies（或devDependencies）清单中，并使用合理的默认<a href="https://github.com/isaacs/node-semver#ranges" target="_blank" rel="external">semver范围</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install domready --save</div></pre></td></tr></table></figure>
<p>注意，现在npm使用<a href="http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/" target="_blank" rel="external">插入符风格的semver范围</a>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">  <span class="string">"domready"</span>: <span class="string">"^1.0.4"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指定启动脚本"><a href="#指定启动脚本" class="headerlink" title="指定启动脚本"></a>指定启动脚本</h2><p>在package.json中设定scripts.start，你就可以在命令行中用npm start启动程序了。这个非常方便，因为克隆了你的程序的其他node开发人员不用猜就能轻松运行它。</p>
<p>额外奖励：如果在package.json中定义了scripts.start，你就<strong>不需要Procfile了</strong>(Heroku平台用Procfile来声明在你程序的dynos上运行什么命令)。使用npm start会自动创建一个作为<a href="https://github.com/heroku/heroku-buildpack-nodejs/blob/97a5856d3d4407e9fde82bac31cb308430e459f7/bin/compile#L122-L135" target="_blank" rel="external">web进程</a>的Procfile。</p>
<p>这里有个启动脚本示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"start"</span>: <span class="string">"node index.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指定测试脚本"><a href="#指定测试脚本" class="headerlink" title="指定测试脚本"></a>指定测试脚本</h2><p>就像团队中的所有人都应该可以运行程序一样，他们也应该可以测试它。package.json中的scripts.test就是用来指定运行测试套件的脚本的。如果你用mocha之类的东西运行测试，一定要确保把它包含在package.json里的devDependencies中，并且指向安装在你项目本地的文件，而不是全局安装的mocha：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"test"</span>: <span class="string">"mocha"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不要把依赖项放在源码的版本控制中"><a href="#不要把依赖项放在源码的版本控制中" class="headerlink" title="不要把依赖项放在源码的版本控制中"></a>不要把依赖项放在源码的版本控制中</h2><p>很多node程序使用的npm模块带有C语言写的依赖项，比如bson、ws和hiredis，这些依赖项必须在Heroku的64位Linux架构下进行编译。编译过程可能非常耗时。为了让构建过程尽可能的快，Heroku的node buildpack在下载和编译完依赖项后会<a href="https://github.com/heroku/heroku-buildpack-nodejs/blob/a096187082363bdee6a34dd8ddb90344601649ad/bin/compile#L58-76" target="_blank" rel="external">缓存它们</a>，以便在后续部署中重用。这个缓存是为了降低网络流量并减少编译次数。</p>
<p>忽略node_modules目录也是模块创作者推荐的npm实践。应用程序和模块之间少了一个区别！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> node_modules &gt;&gt; .gitignore</div></pre></td></tr></table></figure>
<h2 id="用环境变量配置npm"><a href="#用环境变量配置npm" class="headerlink" title="用环境变量配置npm"></a>用环境变量配置npm</h2><p>以下内容摘自<a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="external">npm配置</a>：</p>
<blockquote>
<p>所有以npm<em>config</em>开头的环境变量都会被解释为配置参数。比如说环境中有npm_config_foo=bar时，会将配置参数foo设置为bar。任何没有给出值的环境配置的值都会设置为true。配置值对大小写不敏感，所以NPM_CONFIG_FOO=bar也一样。</p>
</blockquote>
<p>最近在所有的Heroku构建中都有程序的环境。这一变化让Heroku上的node用户无需修改程序代码就可以控制他们的npm配置。习惯#7是这一方式的完美例证。</p>
<h2 id="带着你自己的npm注册中心"><a href="#带着你自己的npm注册中心" class="headerlink" title="带着你自己的npm注册中心"></a>带着你自己的npm注册中心</h2><p>最近几年公共npm注册中心出现了<a href="http://modulecounts.com/" target="_blank" rel="external">突飞猛进式的增长</a>，因此会偶尔不稳定。所以很多node用户开始寻求公共注册中心之外的方案，他们或者是出于开发和构建过程中速度及稳定性方面的考虑，或者是因为要放置私有的node模块。</p>
<p>最近几个月冒出了一些可供选择的npm注册中心。<a href="http://blog.nodejitsu.com/using-private-npm-on-heroku/" target="_blank" rel="external">Nodejitsu</a>和<a href="https://addons.heroku.com/gemfury#hello" target="_blank" rel="external">Gemfury</a>提供收费的私有注册中心，此外也有一些免费的，比如<a href="https://github.com/jbuck/npm-readonly-mirror" target="_blank" rel="external">Mozilla的只读S3/CloudFront镜像</a>和<a href="http://npmjs.eu/" target="_blank" rel="external">Maciej Małecki的欧洲镜像</a>。</p>
<p>在Heroku上配置node程序使用定制注册中心很容易：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heroku config:set npm_config_registry=http://registry.npmjs.eu</div></pre></td></tr></table></figure>
<h2 id="追踪过期的依赖项"><a href="#追踪过期的依赖项" class="headerlink" title="追踪过期的依赖项"></a>追踪过期的依赖项</h2><p>如果你编程的时间足够长，可能已经领教过<a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BE%9D%E6%80%A7%E5%9C%B0%E7%8B%B1" target="_blank" rel="external">相依性地狱</a>的厉害了。好在Node.js和npm接纳了semver，即<a href="http://semver.org/" target="_blank" rel="external">语义化版本管理规范</a> ，设置了一个健全的依赖项管理先例。在这个方案下，版本号和它们的变化方式传达的含义涉及到了底层代码，以及从一个版本到下一版本修改了什么。</p>
<p>npm有一个很少有人知道的命令，outdated。它可以跟npm update结合使用，能够找出程序的那些依赖项已经过期了，需要更新：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> my-node-app</div><div class="line">npm outdated</div><div class="line"></div><div class="line">Package            Current  Wanted     Latest  Location</div><div class="line">-------            -------  ------     ------  --------</div><div class="line">express              3.4.8   3.4.8  4.0.0-rc2  express</div><div class="line">jade                 1.1.5   1.1.5      1.3.0  jade</div><div class="line">cors                 2.1.1   2.1.1      2.2.0  cors</div><div class="line">jade                0.26.3  0.26.3      1.3.0  mocha &gt; jade</div><div class="line">diff                 1.0.7   1.0.7      1.0.8  mocha &gt; diff</div><div class="line">glob                 3.2.3   3.2.3      3.2.9  mocha &gt; glob</div><div class="line">commander            2.0.0   2.0.0      2.1.0  mocha &gt; commander</div></pre></td></tr></table></figure>
<p>如果你做的是开源的node程序或模块，可以看看<a href="https://david-dm.org/" target="_blank" rel="external">david-dm</a>，<a href="https://nodei.co/" target="_blank" rel="external">NodeICO</a>和<a href="http://shields.io/" target="_blank" rel="external">shields.io</a>，你可以用这三个优秀服务所提供的图片徽章在项目的README或网站上显示生动的依赖信息。</p>
<h2 id="用npm脚本运行定制的构建步骤"><a href="#用npm脚本运行定制的构建步骤" class="headerlink" title="用npm脚本运行定制的构建步骤"></a>用npm脚本运行定制的构建步骤</h2><p>随着npm生态系统的持续增长，开发和构建过程的自动化选择也会随之增长。<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>是迄今为止node世界中最流行的构建工具，但像<a href="http://gulpjs.com/" target="_blank" rel="external">gulp.js</a>这种新工具，以及<a href="http://substack.net/task_automation_with_npm_run" target="_blank" rel="external">普通的老式npm</a>脚本也因为较轻的负载受到欢迎。</p>
<p>在你把node程序部署到Heroku上时，要运行npm install –production命令以确保程序的npm依赖项会被下载下来装上。但那个命令也会做其它事情：它会运行你在package.json文件中定义的所有npm脚本钩子，比如preinstall和postinstall。这里有个样本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"my-node-app"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.2.3"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"preinstall"</span>: <span class="string">"echo here it comes!"</span>,</div><div class="line">    <span class="string">"postinstall"</span>: <span class="string">"echo there it goes!"</span>,</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"tap test/*.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些脚本可以是行内bash命令，或者也可以指向可执行的命令行文件。你还可以在脚本内引用其他npm脚本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"postinstall"</span>: <span class="string">"npm run build &amp;&amp; npm run rejoice"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"grunt"</span>,</div><div class="line">    <span class="string">"rejoice"</span>: <span class="string">"echo yay!"</span>,</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node index.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="尝试新东西"><a href="#尝试新东西" class="headerlink" title="尝试新东西"></a>尝试新东西</h2><p>ES6，也就是被大众称为JavaScript的ECMAScript语言规范的下一版，其工作名称为Harmony。 Harmony给JavaScript带来了很多振奋人心的新特性，其中很多已经出现在较新版本的node中了。</p>
<p>Harmony实现了<a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">很多新特性</a>，比如<a href="https://github.com/JustinDrake/node-es6-examples#block-scoping" target="_blank" rel="external">块作用域</a>、<a href="https://github.com/JustinDrake/node-es6-examples#block-scoping" target="_blank" rel="external">生成器</a>、<a href="https://github.com/JustinDrake/node-es6-examples#proxies" target="_blank" rel="external">代理</a>、<a href="https://github.com/JustinDrake/node-es6-examples#weak-maps" target="_blank" rel="external">弱映射</a>等等。</p>
<p>要在你的node程序中启用harmony的特性，需要指定一个比较新的node引擎，比如0.11.x，并在启动脚本中设置–harmony选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;node --harmony index.js&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;engines&quot;: &#123;</div><div class="line">    &quot;node&quot;: &quot;0.11.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h2><p>客户端JavaScript有乱如麻团般的遗留代码，但那并不是语言本身的错。由于缺乏合理的依赖项管理工具，让jQuery-插件拷贝-粘帖的黑暗时代延续了好多年。感谢npm，带着我们步入了前端振兴的年代：npm注册中心像野草一样疯长，为浏览器设计的模块也呈现出了惊人的增长势头。</p>
<p><a href="http://browserify.org/articles" target="_blank" rel="external">Browserify</a>是一个让node模块可以用在浏览器中的神奇工具。如果你是前端开发人员，browserify将会改变你的人生。可能不是今天，也不是明天，但不会太久。如果你想开始使用browserify，请参阅<a href="http://browserify.org/articles" target="_blank" rel="external">这些文章</a>。</p>
<h2 id="你有哪些习惯？"><a href="#你有哪些习惯？" class="headerlink" title="你有哪些习惯？"></a>你有哪些习惯？</h2><p>不管你已经做过一段时间node程序，还是<a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="external">刚刚开始</a>，我们都希望这些小技巧能对你有所帮助。如果你有一些（健康的）node习惯想要跟大家分享，请在发tweet时带上<a href="https://twitter.com/search?q=%23node_habits&amp;src=typd&amp;f=realtime" target="_blank" rel="external">#node_habits</a>标签。编码快乐！</p>
<h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>本文最初由<a href="http://zeke.sikelianos.com/" target="_blank" rel="external">Zeke sikelianos</a>发表在<a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a>上。Zeke在Heroku工作，用ruby和coffeescript编写开源软件。他从事设计师这一职业已经有14年了，信奉信息自由的精神，并且相信用计算机可以创造出美好的事物。</p>
<p><strong>查看英文原文</strong>：<a href="https://blog.heroku.com/archives/2014/3/11/node-habits" target="_blank" rel="external">What’s New in Node.js v0.12 – Running Multiple Instances in a Single Process</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://www.infoq.com/cn/articles/node.js-habits&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/node.js-hab
    
    </summary>
    
      <category term="Practice" scheme="http://blog.dongderu.net/categories/Practice/"/>
    
    
      <category term="nodejs" scheme="http://blog.dongderu.net/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>脱离html元素的AngularJS ng-repeat</title>
    <link href="http://blog.dongderu.net/2014/03/25/2014-3-25-angularjs-ng-repeat-with-no-html-element/"/>
    <id>http://blog.dongderu.net/2014/03/25/2014-3-25-angularjs-ng-repeat-with-no-html-element/</id>
    <published>2014-03-25T07:04:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/12857714/angularjs-ng-repeat-with-no-html-element</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>楼主使用下面的代码生成一个列表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-cloak</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"n in list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; n[1] &#125;&#125;"</span>&gt;</span>&#123;&#123; n[0] &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Additional item<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然而，<code>&lt;div&gt;</code>元素在一些浏览器中会导致一些细微的显示差异。楼主想知道是否有办法在执行<code>ng-repeat</code>循环时不带上<code>div</code>容器，或者是否有什么其他手段实现同样的效果。</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><p>幸运的是<code>AngularJS</code>1.2版本加入了一个内置的repeating支持，且不需要增加子容器，使用<code>ng-repeat-start</code>和<code>ng-repeat-end</code>这两个新directive就可以了。<br>下面是一个增加<a href="http://getbootstrap.com/components/#pagination" target="_blank" rel="external">Bootstrap分页</a>的小例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat-start</span>=<span class="string">"page in [1,2,3,4,5,6]"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat-end</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>完整的例子在<a href="http://plnkr.co/edit/NdWS1H?p=preview" target="_blank" rel="external">这里</a>。<br>John Lindquist还提供了一个有关于此的<a href="http://egghead.io/lessons/angularjs-ng-repeat-start" target="_blank" rel="external">视频教程</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
  </entry>
  
  <entry>
    <title>使用Sails.js执行Sql事务</title>
    <link href="http://blog.dongderu.net/2014/03/08/2014-3-8-transactional-sql-with-sails-js/"/>
    <id>http://blog.dongderu.net/2014/03/08/2014-3-8-transactional-sql-with-sails-js/</id>
    <published>2014-03-08T07:20:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StackOverflow地址"><a href="#StackOverflow地址" class="headerlink" title="StackOverflow地址"></a>StackOverflow地址</h2><p><a href="">http://stackoverflow.com/questions/17794784/transactional-sql-with-sails-js</a></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>楼主玩了一段时间的NodeJs/Express，觉得自己可以试试用Javascript全栈来做重写一个完整的大项目来看看效果如何。Sails.js看上去是一个不错的选择，后台支持Rest API，且支持使用Web Socket，正和楼主的口味，然而还有一个大问题没有解决，那就是如何在Nodejs中执行Sql事务。<br>大多数楼主见过的基于Nodejs的数据层/ORM并不支持MySQL的事务操作。Sails.js包含的ORM组件Waterline也是如此，但是奇怪的是我在一些文档描述和用户提问中有看到事务操作被经常提及。Knex.js这个组件支持事务，所以楼主想问是否能用它替换掉Waterline（除非Waterline作为Sails.js框架的核心）。<br>楼主还想问是否有除了Bookshelf之外的基于Knex.js之上的ORM组件，因为楼主其实对Backbone Model/Collection系统并不感冒。</p>
<h2 id="最佳解答"><a href="#最佳解答" class="headerlink" title="最佳解答"></a>最佳解答</h2><p>你可以直接用<code>Model.query()</code>来写SQL查询。因为它是一个异步方法，你还需要使用promise或者async来连接他们。譬如，使用MYSQL adapter, async和一个<code>User</code>模型的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.auto(&#123;</div><div class="line">  <span class="attr">transaction</span>: <span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</div><div class="line">    User.query(<span class="string">'BEGIN'</span>, next);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">user</span>: [<span class="string">'transaction'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">    User.findOne(req.param(<span class="string">'id'</span>)).exec(next);</div><div class="line">  &#125;],</div><div class="line">  <span class="comment">// other queries in the transaction</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    User.query(<span class="string">'ROLLBACK'</span>, next);</div><div class="line">    <span class="keyword">return</span> next(err);</div><div class="line">  &#125;</div><div class="line">  User.query(<span class="string">'COMMIT'</span>, next);</div><div class="line">  <span class="comment">// final tasks</span></div><div class="line">  res.json(results.serialize);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StackOverflow地址&quot;&gt;&lt;a href=&quot;#StackOverflow地址&quot; class=&quot;headerlink&quot; title=&quot;StackOverflow地址&quot;&gt;&lt;/a&gt;StackOverflow地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;http://
    
    </summary>
    
      <category term="StackOverflow" scheme="http://blog.dongderu.net/categories/StackOverflow/"/>
    
    
      <category term="nodejs" scheme="http://blog.dongderu.net/tags/nodejs/"/>
    
      <category term="stackoverflow" scheme="http://blog.dongderu.net/tags/stackoverflow/"/>
    
      <category term="sailsjs" scheme="http://blog.dongderu.net/tags/sailsjs/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 File api 实现断点续传</title>
    <link href="http://blog.dongderu.net/2014/03/04/2014-3-4-html5-file-api/"/>
    <id>http://blog.dongderu.net/2014/03/04/2014-3-4-html5-file-api/</id>
    <published>2014-03-04T02:20:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载自： <a href="http://www.cnblogs.com/zhwl/p/3580776.html" target="_blank" rel="external">http://www.cnblogs.com/zhwl/p/3580776.html</a></p>
<p>目前市场上大多数的网站的断点上传都是需要安装浏览器插件的，本文就针对高级浏览器的环境下，通过HTML5 File api实现断点上传进行说明</p>
<h2 id="实现文件多选"><a href="#实现文件多选" class="headerlink" title="实现文件多选"></a>实现文件多选</h2><p>HTML5的<code>&lt;input&gt;</code>新增了<code>multiple</code>属性，该属性可接受多个值的文件上传字段</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加了该属性用户就可以在弹出的对话框中一次性选择多个文件了</p>
<h2 id="实现文件从计算机拖拽到网页以及添加文件队列功能"><a href="#实现文件从计算机拖拽到网页以及添加文件队列功能" class="headerlink" title="实现文件从计算机拖拽到网页以及添加文件队列功能"></a>实现文件从计算机拖拽到网页以及添加文件队列功能</h2><p>这里我们用 dragover 和 drop 两个事件来管理文件拖拽的功能<br>其中 dragover 用来处理在指定的元素上移动时的事件，这里我们通过给body绑定dragover时间来处理页面中拖动文件的事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'dragover'</span>, dragFile, <span class="literal">false</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dragFile</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    evt.stopPropagation();</div><div class="line">    evt.preventDefault();</div><div class="line">    evt.dataTransfer.dropEffect = <span class="string">'copy'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用 drop 事件来处理鼠标松开时候的事件，此时应该将用户拖动过来的文件加入到上传队列中，以供后续的处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'drop'</span>, dropFile, <span class="literal">false</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dragFile</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    evt.stopPropagation();</div><div class="line">    evt.preventDefault();</div><div class="line">    <span class="comment">// dataTransfer.files属性可以获取到所有拖动选择的文件，通过遍历可以读取到所有文件的信息。</span></div><div class="line">    <span class="comment">// 遍历每个文件可以获取到文件的 name、size、type、lastModifiedDate等关键信息</span></div><div class="line">    <span class="keyword">var</span> files = evt.dataTransfer.files;</div><div class="line">    <span class="comment">// addfile 方法 用来添加上传文件队列，在input的change事件中也需要调用</span></div><div class="line">    <span class="comment">// 该方法首先检查有无文件正在上传中，如果有就将后续加入的文件放到上传队列中，如果没有文件正在上传就直接执行上传命令</span></div><div class="line">    addfile(files);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件续传原理"><a href="#文件续传原理" class="headerlink" title="文件续传原理"></a>文件续传原理</h2><p>目前比较常用的断点续传的方法有两种，一种是通过websocket接口进行文件上传，另一种是通过ajax，两种方法各有千秋，虽然websocket听起来比较高端些~ 但是除了用了不同的协议外其他的算法基本上都是很相似的，并且服务端要开启ws接口，这里用相对方便的ajax来说明断点上传的思路。<br>说来说去，断点续传最核心的内容就是把文件“切片”然后再一片一片的传给服务器，但是这看似简单的上传过程却有着无数的坑。<br>首先是文件的识别，一个文件被分成了若干份之后如何告诉服务器你切了多少块，以及最终服务器应该如何把你上传上去的文件进行合并，这都是要考虑的。<br>因此在文件开始上传之前，我们和服务器要有一个“握手”的过程，告诉服务器文件信息，然后和服务器约定切片的大小，当和服务器达成共识之后就可以开始后续的文件传输了。<br>前台要把每一块的文件传给后台，成功之后前端和后端都要标识一下，以便后续的断点。<br>当文件传输中断之后用户再次选择文件就可以通过标识来判断文件是否已经上传了一部分，如果是的话，那么我们可以接着上次的进度继续传文件，以达到续传的功能。</p>
<h2 id="文件的前端切片"><a href="#文件的前端切片" class="headerlink" title="文件的前端切片"></a>文件的前端切片</h2><p>有了HTML5 的 File api之后切割文件比想想的要简单的多的多。<br>只要用slice 方法就可以了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> packet = file.slice(start, end);</div></pre></td></tr></table></figure>
<p>参数start是开始切片的位置，end是切片结束的位置 单位都是字节。通过控制start和end 就可以是实现文件的分块<br>如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">file.slice(<span class="number">0</span>,<span class="number">1000</span>);</div><div class="line">file.slice(<span class="number">1000</span>,<span class="number">2000</span>);</div><div class="line">file.slice(<span class="number">2000</span>,<span class="number">3000</span>);</div><div class="line"><span class="comment">// ......</span></div></pre></td></tr></table></figure>
<h2 id="文件片段的上传"><a href="#文件片段的上传" class="headerlink" title="文件片段的上传"></a>文件片段的上传</h2><p>上一部我们通过slice方法把文件分成了若干块，接下来要做的事情就是把这些碎片传到服务器上。<br>这里我们用ajax的post请求来实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"><span class="keyword">var</span> url = xxx <span class="comment">// 文件上传的地址 可以包括文件的参数 如文件名称 分块数等以便后台处理</span></div><div class="line">xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</div><div class="line">     <span class="comment">// 判断文件是否上传成功，如果成功继续上传下一块，如果失败重试该快</span></div><div class="line">&#125;</div><div class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">     <span class="comment">// 选用 如果文件分块大小较大 可以通过该方法判断单片文件具体的上传进度</span></div><div class="line">     <span class="comment">// e.loaded  该片文件上传了多少</span></div><div class="line">     <span class="comment">// e.totalSize 该片文件的总共大小</span></div><div class="line">&#125;</div><div class="line">xhr.send(packet);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自： &lt;a href=&quot;http://www.cnblogs.com/zhwl/p/3580776.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/zhwl/p/3580776.html&lt;/a&gt;&lt;/
    
    </summary>
    
      <category term="Practice" scheme="http://blog.dongderu.net/categories/Practice/"/>
    
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="html5" scheme="http://blog.dongderu.net/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>CQRS介绍</title>
    <link href="http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/"/>
    <id>http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/</id>
    <published>2013-05-22T14:12:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>我今天找到一篇好文，深入浅出的介绍了CQRS，边翻译边学习了。原文地址：<br><a href="http://www.codeproject.com/Articles/555855/Introduction-to-CQRS" target="_blank" rel="external">http://www.codeproject.com/Articles/555855/Introduction-to-CQRS</a></p>
<p><a href="https://dl.dongderu.net/u/109488224/Diary.CQRS.zip" target="_blank" rel="external">附带源码下载</a></p>
<p>转载请注明出处 <a href="http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/">http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/</a></p>
<h1 id="CQRS是什么？"><a href="#CQRS是什么？" class="headerlink" title="CQRS是什么？"></a>CQRS是什么？</h1><p><img src="http://www.codeproject.com/KB/architecture/555855/CQRS.jpg" alt=""></p>
<p>CQRS就是指命令和查询职责的分离。许多人认为CQRS是一个完整的构架，但是他们错了。CQRS只是一个小的模式形态。这个模式最初是由Greg Young和Udi Dahan两位大师提出的。他们是从一个叫做“命令与查询分离”的模式得到的灵感，这个模式是由Bertrand Meyer在他撰写的《Object Oriented Software Construction》书里定义的。该模式的关键在于：“一个方法要么是用来改变某个对象的状态的，要么就是返回一个结果，这两者不会同时并存”。换句话说，提问不会改变问题的答案。正式一点的说法是，之所以要方法返回结果，因为他是“引用透明的”，因此不会执行额外的有影响的操作（来自维基百科）。（插一句，这句话你可能看不懂，请自行琢磨原文，我根据自己的理解白话一下：你既然要得到正常的结果，不会蛋疼到查询的时候同时去改变要查询的结果吧==b。。。）根据上述理论，我们可以把方法拆分成两个部分：</p>
<ul>
<li><strong>Commands（命令）</strong> - 改变某一个对象或整个系统的状态（有时也叫做modifiers或者mutators）。</li>
<li><strong>Queries（查询）</strong> - 返回值并且不会改变对象的状态。</li>
</ul>
<p>在实际操作中很容易把这两者区分开来。查询会返回一个预先定义的类型，而命令返回void。这样一个模式被已经得到广泛的认可而且能帮助大家更好地理解对象。不过另一方面来说，CQRS仅适用于某些特定的场景。</p>
<p>大多数应用都使用了主流的专注于模型的读和写操作的解决方案。但是读和写采用相同的模型会导致模型越来越复杂变得十分难以维护和优化。</p>
<p>命令与查询两种模式的应用的真正优势是你可以将那些改变状态的操作从那些不应该出现的地方剥离出来。这样的分离会给你在处理调试和优化的过程中带来很大的方便。你可以将你的读取端独立地进行优化，而暂且不管写的操作。写操作端就是指领域的范畴了。领域包含了所有的行为。而读取端仅仅是用来做数据呈现的。</p>
<p>采取这样的模式的另一个好处是，在大型的应用中，你可以将你的开发团队进行分割，以分别负责读和写的实现，且两者之间的知识的传递可以不对称。比如负责呈现数据的小组根本不需要了解领域模型，命令和ES的知识和实现，只需要了解展现数据库的结构。（好钢用在刀刃上，这样可以为企业优化组合，节约成本）</p>
<h2 id="Query-side（查询端）"><a href="#Query-side（查询端）" class="headerlink" title="Query side（查询端）"></a>Query side（查询端）</h2><p>查询端仅包含获取数据的方法。从架构的角度出发，所有的方法都应该返回用于显示目的的DTO(Data Transfer Object)。一般来说DTO就是Domain Objects（领域对象）的投射（两者很相像）。在有些情况下，构建DTO的过程会十分蛋疼，尤其在需要构建一些很复杂的DTO的情况下。</p>
<p><img src="http://www.codeproject.com/KB/architecture/555855/QuerySide.jpg" alt=""></p>
<p>如图，Read Layer（读取操作层）可以直连数据库（数据源），直接用存储过程来读在这种模式下不是一个坏主意。直连数据源使得查询维护和优化变得十分容易。这里采用denormalize（反规范化，就是允许数据冗余，比如一张表对应一个页面，不使用Join，允许有重复的字段）的数据库设计也是有道理的。原因在于数据的读取操作往往好几倍频繁于领域行为的执行。而反规范化的应用可以很好的帮助应用提升性能。</p>
<h2 id="Command-Side（命令端）"><a href="#Command-Side（命令端）" class="headerlink" title="Command Side（命令端）"></a>Command Side（命令端）</h2><p><img src="http://www.codeproject.com/KB/architecture/555855/CommandSide.jpg" alt=""></p>
<p>命令由客户端发出，并传送到领域层。命令实际上是一种消息，它包含了一些特定的实体信息来完成某一项操作。命令的命名规则可以是DoSomething（举个例子，ChangeName, DeleteOrder…）。他们通知领域实体执行某种操作并返回一个值或者失败信号。命令由Command Handler（命令执行器）进行处理。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span></div><div class="line">&#123;</div><div class="line">    Guid Id &#123; <span class="keyword">get</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Command</span> : <span class="title">ICommand</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span>(<span class="params">Guid id,<span class="keyword">int</span> version</span>)</span></div><div class="line">    &#123;</div><div class="line">        Id = id;</div><div class="line">        Version = version;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateItemCommand</span>:<span class="title">Command</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>;<span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> DateTime From &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> DateTime To &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateItemCommand</span>(<span class="params">Guid aggregateId, <span class="keyword">string</span> title, </span></span></div><div class="line">        <span class="keyword">string</span> description,<span class="keyword">int</span> version,DateTime <span class="keyword">from</span>, DateTime to)</div><div class="line">        : <span class="title">base</span>(<span class="params">aggregateId,version</span>)</div><div class="line">    &#123;</div><div class="line">        Title = title;</div><div class="line">        Description = description;</div><div class="line">        From = <span class="keyword">from</span>;</div><div class="line">        To = to;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的命令都会被传入Command Bus（命令总线），它会将每个命令委派给Command Handler进行处理。这样做保证了领域的单一入口。Command Handler的职责是调用领域层内相应的方法。Command Handler需要具有repository（仓储）的数据连接来加载需要的实体（在CQRS模式中就是指聚合根）以满足某些方法的需要。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public interface ICommandHandler&lt;TCommand&gt; where TCommand : Command</div><div class="line">&#123;</div><div class="line">    void Execute(TCommand command);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class CreateItemCommandHandler : ICommandHandler&lt;CreateItemCommand&gt;</div><div class="line">&#123;</div><div class="line">    private IRepository&lt;DiaryItem&gt; _repository;</div><div class="line"></div><div class="line">    public CreateItemCommandHandler(IRepository&lt;DiaryItem&gt; repository)</div><div class="line">    &#123;</div><div class="line">        _repository = repository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void Execute(CreateItemCommand command)</div><div class="line">    &#123;</div><div class="line">        if (command == null)</div><div class="line">        &#123;</div><div class="line">            throw new ArgumentNullException("command");</div><div class="line">        &#125;</div><div class="line">        if (_repository == null)</div><div class="line">        &#123;</div><div class="line">            throw new InvalidOperationException("Repository is not initialized.");</div><div class="line">        &#125;</div><div class="line">        var aggregate = new DiaryItem(command.Id, command.Title, command.Description,             </div><div class="line">                                      command.From, command.To);</div><div class="line">        aggregate.Version = -1;</div><div class="line">        _repository.Save(aggregate, aggregate.Version);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Command Handler负责如下几项工作：</p>
<ul>
<li>负责从消息基础架构（Command Bus）里接受Command实例。</li>
<li>负责验证Command是否有效。</li>
<li>负责找到针对该Command的聚合实例。</li>
<li>负责调用聚合实例的相关方法，并且从Command类中获取相关字段作为参数传入方法中。</li>
<li>从聚合的角度来看总是在更新状态（可以从代码得到直观体现）。</li>
</ul>
<h2 id="Internal-Events（内部事件）"><a href="#Internal-Events（内部事件）" class="headerlink" title="Internal Events（内部事件）"></a>Internal Events（内部事件）</h2><p>在讨论这个话题之前，我们可能会先想到一个问题，什么是领域事件？领域事件就是那些在系统中已经发生的事情。事件对应命令的执行结果。让我们来举个例子，客户端请求了一个DTO并且在其基础上做了一些修改，而后产生了一条命令向系统推送。相应的Handler加载了对应的聚合根并且执行了指定的Domain Behavior（领域方法），该方法同时产生了一个事件，这个事件由特定的subscriber（订阅器）接收。聚合随后将该事件发布到事件总线上，由事件总线负责将其分发给相关的Handler执行。而那些在聚合根内部被获取执行的就被称为<strong>内部事件</strong>。内部事件的Handler出了负责设置聚合根内部属性的状态以外不作任何其他的操作。</p>
<h3 id="Domain-Behavior（领域方法）"><a href="#Domain-Behavior（领域方法）" class="headerlink" title="Domain Behavior（领域方法）"></a>Domain Behavior（领域方法）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeTitle</span>(<span class="params"><span class="keyword">string</span> title</span>)</span></div><div class="line">&#123;</div><div class="line">    ApplyChange(<span class="keyword">new</span> ItemRenamedEvent(Id, title));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Domain-Event（领域事件）"><a href="#Domain-Event（领域事件）" class="headerlink" title="Domain Event（领域事件）"></a>Domain Event（领域事件）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemCreatedEvent</span>:<span class="title">Event</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> DateTime From &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> DateTime To &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>;<span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemCreatedEvent</span>(<span class="params">Guid aggregateId, <span class="keyword">string</span> title ,</span></span></div><div class="line">        <span class="keyword">string</span> description, DateTime <span class="keyword">from</span>, DateTime to)</div><div class="line">    &#123;</div><div class="line">        AggregateId = aggregateId;</div><div class="line">        Title = title;</div><div class="line">        From = <span class="keyword">from</span>;</div><div class="line">        To = to;</div><div class="line">        Description = description;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Event</span>:<span class="title">IEvent</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Version;</div><div class="line">    <span class="keyword">public</span> Guid AggregateId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Internal-Domain-Event-Handler（内部领域事件执行器）"><a href="#Internal-Domain-Event-Handler（内部领域事件执行器）" class="headerlink" title="Internal Domain Event Handler（内部领域事件执行器）"></a>Internal Domain Event Handler（内部领域事件执行器）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span>(<span class="params">ItemRenamedEvent e</span>)</span></div><div class="line">&#123;</div><div class="line">    Title = e.Title;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件还经常会挂载一套被称为Event Sourcing (ES)（事件溯源）的模式。事件溯源是一种通过将聚合的变化以事件的形式记录，并将其转换成二进制流保存，以实现持久化的途径。</p>
<p>就像之前提到的那样，聚合根内部所有的状态变化都由事件触发，而且内部事件执行器除了改变的聚合根状态外其他啥事不管。为了要得到聚合根某一个事件点的状态，就需要通过回放事件来完成。在这里我必须提醒一点，就是所有的事件都是只写操作。你不可以改动或者删除已生成的事件。如果你发现系统内部产生了一些错误的事件，你就必须再创建一些修正的事件来弥补之前的错误。</p>
<h2 id="External-Events（外部事件）"><a href="#External-Events（外部事件）" class="headerlink" title="External Events（外部事件）"></a>External Events（外部事件）</h2><p>外部事件经常用来向展示数据库同步当前领域状态的信息。要做到这点，首先要将内部事件发布到领域外部（通过事件总线）。当事件被发布以后，相应的Handler就会接收执行后续的工作。外部事件可以同时面向多个Handler发布。外部事件的Handler主要负责如下几项工作：</p>
<ul>
<li>负责从messaging infrastructure (Event Bus)（消息机制（事件总线））接收事件的实例。</li>
<li>负责加载作业管理器实例（举个例子来说，针对仅负责同步展示数据库的Handler，作业管理器就是ORM框架，或者SqlHelper类）来处理事件。</li>
<li>负责将事件内部的信息作为参数传入，并调用执行作业管理器实例的相应方法。</li>
<li>从作业管理器的角度来看总是在更新状态（可以从代码里得到直观体现）。</li>
</ul>
<h1 id="示例代码说明"><a href="#示例代码说明" class="headerlink" title="示例代码说明"></a>示例代码说明</h1><p>我创建了一个非常简单的例子来演示怎么样实现CQRS模式。这个例子可以让你创建和修改你的日志。该解决方案包含如下项目：</p>
<ul>
<li>Diary.CQRS</li>
<li>Diary.CQRS.Configuration</li>
<li>Diary.CQRS.Web</li>
</ul>
<p>第一个项目包含了所有领域和消息对象。Configuration项目给WebUI提供了IoC注入支持。我们现在来自己看一下这些项目。</p>
<h2 id="Diary-CQRS"><a href="#Diary-CQRS" class="headerlink" title="Diary.CQRS"></a>Diary.CQRS</h2><p>就像我先前提到过的那样，这个项目包含了本例所需的所有领域和消息对象。本CQRS示例项目的唯一入口就是通过将Command发布到Command Bus上。CommandBus类只有一个<strong>Send(T command)</strong>方法。该方法负责通过调用<strong>CommandHandlerFactory</strong>来创建对应的Command Handler。如果某个Command没有找到对应的Command Handler，则会抛出异常。正常情况下，<strong>Execute</strong>方法作为某个行为执行的一部分被调用。该行为会创建一个内部事件，且该事件会存入一个名为<strong>_changes</strong>的内部成员。该成员的定义可以在<strong>AggregateRoot</strong>基类里找到。接下来，该事件会由内部事件处理器处理来更新聚合实例的属性状态。在整个行为执行完毕以后，所有该聚合实例下的未保存事件都会通过仓储进行持久化操作。仓储会将当前聚合实例的版本与已经被持久化保存的实例进行版本比较，查看是否有冲突。如果版本不同，就意味着对象可能已经被其他人改过了，系统将抛出<strong>ConcurrencyException</strong>异常。正常情况下，事件将通过Event Storage进行持久化。</p>
<h3 id="Repository（仓储）"><a href="#Repository（仓储）" class="headerlink" title="Repository（仓储）"></a>Repository（仓储）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">public class Repository&lt;T&gt; : IRepository&lt;T&gt; where T : AggregateRoot, new()</div><div class="line">&#123;</div><div class="line">    private readonly IEventStorage _storage;</div><div class="line">    private static object _lockStorage = new object();</div><div class="line"></div><div class="line">    public Repository(IEventStorage storage)</div><div class="line">    &#123;</div><div class="line">        _storage = storage;</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    public void Save(AggregateRoot aggregate, int expectedVersion)</div><div class="line">    &#123;</div><div class="line">        if (aggregate.GetUncommittedChanges().Any())</div><div class="line">        &#123;</div><div class="line">            lock (_lockStorage)</div><div class="line">            &#123;</div><div class="line">                var item = new T();</div><div class="line"></div><div class="line">                if (expectedVersion != -1)</div><div class="line">                &#123;</div><div class="line">                    item = GetById(aggregate.Id);</div><div class="line">                    if (item.Version != expectedVersion)</div><div class="line">                    &#123;</div><div class="line">                        throw new ConcurrencyException(string.Format("Aggregate &#123;0&#125; has been previously modified",</div><div class="line">                                                                     item.Id));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                _storage.Save(aggregate);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public T GetById(Guid id)</div><div class="line">    &#123;</div><div class="line">       IEnumerable&lt;Event&gt; events;</div><div class="line">       var memento = _storage.GetMemento&lt;BaseMemento&gt;(id);</div><div class="line">       if (memento != null)</div><div class="line">       &#123;</div><div class="line">           events = _storage.GetEvents(id).Where(e=&gt;e.Version&gt;=memento.Version);</div><div class="line">       &#125;</div><div class="line">       else</div><div class="line">       &#123;</div><div class="line">           events = _storage.GetEvents(id);</div><div class="line">       &#125;</div><div class="line">        var obj = new T();</div><div class="line">        if(memento!=null)</div><div class="line">            ((IOriginator)obj).SetMemento(memento);</div><div class="line">        </div><div class="line">        obj.LoadsFromHistory(events);</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="InMemoryEventStorage（事件存储【保存在内存中】）"><a href="#InMemoryEventStorage（事件存储【保存在内存中】）" class="headerlink" title="InMemoryEventStorage（事件存储【保存在内存中】）"></a>InMemoryEventStorage（事件存储【保存在内存中】）</h3><p>在本例中，我创建了一个<strong>InMemoryEventStorage</strong>类，他可以将所有的事件存储在内存中。该类实现了<strong>IEventStorage</strong>接口并重写了四个方法：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;Event&gt; <span class="title">GetEvents</span>(<span class="params">Guid aggregateId</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> events = _events.Where(p =&gt; p.AggregateId == aggregateId).Select(p =&gt; p);</div><div class="line">    <span class="keyword">if</span> (events.Count() == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AggregateNotFoundException(<span class="keyword">string</span>.Format(</div><div class="line">          <span class="string">"Aggregate with Id: &#123;0&#125; was not found"</span>, aggregateId));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> events;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法返回聚合实例下的所有事件，如果没有，则意味着该聚合实例不存在。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Save</span>(<span class="params">AggregateRoot aggregate</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> uncommittedChanges = aggregate.GetUncommittedChanges();</div><div class="line">    <span class="keyword">var</span> version = aggregate.Version;</div><div class="line">    </div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> @<span class="keyword">event</span> <span class="keyword">in</span> uncommittedChanges)</div><div class="line">    &#123;</div><div class="line">        version++;</div><div class="line">        <span class="keyword">if</span> (version &gt; <span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (version % <span class="number">3</span> == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">var</span> originator = (IOriginator)aggregate;</div><div class="line">                <span class="keyword">var</span> memento = originator.GetMemento();</div><div class="line">                memento.Version = version;</div><div class="line">                SaveMemento(memento);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        @<span class="keyword">event</span>.Version=version;</div><div class="line">        _events.Add(@<span class="keyword">event</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> @<span class="keyword">event</span> <span class="keyword">in</span> uncommittedChanges)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> desEvent = Converter.ChangeTo(@<span class="keyword">event</span>, @<span class="keyword">event</span>.GetType());</div><div class="line">        _eventBus.Publish(desEvent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法负责将事件存储到内存中，另外，每执行三个事件存储操作就会产生一个对应聚合实例的快照。该快照实例包含了聚合的所有状态和版本信息。通过使用快照可以提高性能，因为这样做不需要把所有的发生过的事件都读取出来，只要处理最后三个就可以了。</p>
<p>当所有的事件都被持久化以后，他们就通过Event Bus进行发布然后由外部Event Handler接收并处理。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> T GetMemento&lt;T&gt;(Guid aggregateId) <span class="keyword">where</span> T : BaseMemento</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> memento = _mementos.Where(m =&gt; m.Id == aggregateId).Select(m=&gt;m).LastOrDefault();</div><div class="line">    <span class="keyword">if</span> (memento != <span class="literal">null</span>)</div><div class="line">        <span class="keyword">return</span> (T) memento;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回聚合的快照。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveMemento</span>(<span class="params">BaseMemento memento</span>)</span></div><div class="line">&#123;</div><div class="line">    _mementos.Add(memento);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将聚合转存为快照。</p>
<h3 id="Aggregate-Root（聚合根）"><a href="#Aggregate-Root（聚合根）" class="headerlink" title="Aggregate Root（聚合根）"></a>Aggregate Root（聚合根）</h3><p><strong>AggregateRoot</strong>类是所有聚合的基类。该类继承并实现了<strong>IEventProvider</strong>接口。他内部保存着所有未被提交的事件列表。它同时还带有ApplyChange方法用来调用对应的内部事件处理器。<strong>LoadsFromHistory</strong>方法用来加载并应用内部领域事件产生的状态变化。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AggregateRoot</span>:<span class="title">IEventProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Event&gt; _changes;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">internal</span> <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> EventVersion &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AggregateRoot</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        _changes = <span class="keyword">new</span> List&lt;Event&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;Event&gt; <span class="title">GetUncommittedChanges</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> _changes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MarkChangesAsCommitted</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        _changes.Clear();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadsFromHistory</span>(<span class="params">IEnumerable&lt;Event&gt; history</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> e <span class="keyword">in</span> history) ApplyChange(e, <span class="literal">false</span>);</div><div class="line">        Version = history.Last().Version;</div><div class="line">        EventVersion = Version;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ApplyChange</span>(<span class="params">Event @<span class="keyword">event</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        ApplyChange(@<span class="keyword">event</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ApplyChange</span>(<span class="params">Event @<span class="keyword">event</span>, <span class="keyword">bool</span> isNew</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">dynamic</span> d = <span class="keyword">this</span>;</div><div class="line">        </div><div class="line">        d.Handle(Converter.ChangeTo(@<span class="keyword">event</span>,@<span class="keyword">event</span>.GetType()));</div><div class="line">        <span class="keyword">if</span> (isNew)</div><div class="line">        &#123;</div><div class="line">            _changes.Add(@<span class="keyword">event</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="EventBus（事件总线）"><a href="#EventBus（事件总线）" class="headerlink" title="EventBus（事件总线）"></a>EventBus（事件总线）</h3><p>事件表述了系统内的状态变化。事件产生的主要目的之一就是更新读取模型。为了实现这一点我创建了<strong>EventBus</strong>类。该类的唯一职责就是将事件发布到subscribers（订阅者）那里。一个单一事件可以被发布到多个订阅者手中。不过在本例中，我们还用不到手工订阅（针对某些事件做某些特殊处理）。Event handler factory（事件处理器工厂）会返回一个<strong>EventHanlder</strong>的列表来处理当前事件。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventBus</span>:<span class="title">IEventBus</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> IEventHandlerFactory _eventHandlerFactory;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventBus</span>(<span class="params">IEventHandlerFactory eventHandlerFactory</span>)</span></div><div class="line">    &#123;</div><div class="line">        _eventHandlerFactory = eventHandlerFactory;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> Publish&lt;T&gt;(T @<span class="keyword">event</span>) <span class="keyword">where</span> T : Event</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> handlers = _eventHandlerFactory.GetHandlers&lt;T&gt;();</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> eventHandler <span class="keyword">in</span> handlers)</div><div class="line">        &#123;</div><div class="line">            eventHandler.Handle(@<span class="keyword">event</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Event-Handlers（事件处理器）"><a href="#Event-Handlers（事件处理器）" class="headerlink" title="Event Handlers（事件处理器）"></a>Event Handlers（事件处理器）</h3><p>事件处理器的主要目的是接收事件消息并更新读取模型。在下面的例子中，你可以看到一个<strong>ItemCreatedEventHandler</strong>类。它负责处理<strong>ItemCreatedEvent</strong>事件。通过读取事件内保存的信息，它创建了一个新的对象并将其存入展示数据库中。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ItemCreatedEventHandler : IEventHandler&lt;ItemCreatedEvent&gt;</div><div class="line">&#123;</div><div class="line">    private readonly IReportDatabase _reportDatabase;</div><div class="line">    public ItemCreatedEventHandler(IReportDatabase reportDatabase)</div><div class="line">    &#123;</div><div class="line">        _reportDatabase = reportDatabase;</div><div class="line">    &#125;</div><div class="line">    public void Handle(ItemCreatedEvent handle)</div><div class="line">    &#123;</div><div class="line">        DiaryItemDto item = new DiaryItemDto()</div><div class="line">            &#123;</div><div class="line">                Id = handle.AggregateId,</div><div class="line">                Description =  handle.Description,</div><div class="line">                From = handle.From,</div><div class="line">                Title = handle.Title,</div><div class="line">                To=handle.To,</div><div class="line">                Version =  handle.Version</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        _reportDatabase.Add(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Diary-CQRS-Web"><a href="#Diary-CQRS-Web" class="headerlink" title="Diary.CQRS.Web"></a>Diary.CQRS.Web</h2><p>该项目是本CQRS示例的用户交互平台。这个Web项目是一个标准的ASP.NET MVC4应用，里面仅包含一个控制器<strong>HomeController</strong>和六个<strong>ActionResult</strong>方法：</p>
<ul>
<li><strong>ActionResult Index()</strong> - 该方法将返回Index视图，Index视图作为应用的主界面以列表的形式呈现所有日志内容。</li>
<li><strong>ActionResult Delete(Guid id)</strong> - 该方法创建了一个新的<strong>DeleteItemCommand</strong>命令消息实例并将其发布至<strong>CommandBus</strong>。当命令发送成功后，将返回Index视图。</li>
<li><strong>ActionResult Add()</strong> - 返回添加视图，你可以在该视图上输入新的日志内容。</li>
<li><strong>ActionResult Add(DiaryItemDto item)</strong> - 该方法创建了一个新的<strong>CreateItemCommand</strong>命令消息实例并将其发布至<strong>CommandBus</strong>。当日志创建成功后，将返回Index视图。</li>
<li><strong>ActionResult Edit(Guid id)</strong> - 返回选定日志项的编辑视图。</li>
<li><strong>ActionResult Edit(DiaryItemDto item)</strong> - 该方法创建了一个新的<strong>ChangeItemCommand</strong>命令消息实例并将其发布至<strong>CommandBus</strong>。当日志更新成功后，将返回Index视图。当ConcurrencyError（并发错误）发生时，页面上将显示被抛出的异常信息。</li>
</ul>
<p>下图即为展示日志列表的主界面。</p>
<p><img src="http://www.codeproject.com/KB/architecture/555855/main.jpg" alt=""></p>
<h1 id="何时应该采用CQRS"><a href="#何时应该采用CQRS" class="headerlink" title="何时应该采用CQRS"></a>何时应该采用CQRS</h1><p>总的来说，CQRS模式的应用会让在你应对需要处理需要高度协作以及大型，多用户，高复杂度，包含不断变更的业余规则，还有业务优先的系统中体验到巨大的价值。另外，当你需要实现追踪和记录历史数据功能时它会显得特别有用。</p>
<p>通过CQRS，你可以做到让读写性能飞速提升。而且系统原生就支持了scaling out（横向扩展）。通过将读和写的操作分开，你可以针对任意一方面进行优化。</p>
<p>当你需要面对非常困难的业务逻辑时，CQRS模式就会显得非常有用。CQRS会强制性地避免你将领域逻辑和基础架构的操作进行混淆。</p>
<p>通过应用CQRS模式，你可以在定义好通信接口以后，将开发工作分开交付给不同的团队进行实施。</p>
<h1 id="何时不应该采用CQRS"><a href="#何时不应该采用CQRS" class="headerlink" title="何时不应该采用CQRS"></a>何时不应该采用CQRS</h1><p>如果你所开发的项目不需要进行高度地协作，就是指你不需要将同一个系列的数据操作拆分给多个人来写代码的话，那就不应该使用CQRS。</p>
<p>全文翻译完毕 by 止觀。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我今天找到一篇好文，深入浅出的介绍了CQRS，边翻译边学习了。原文地址：&lt;br&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/555855/Introduction-to-CQRS&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
      <category term="Documentation" scheme="http://blog.dongderu.net/categories/Documentation/"/>
    
    
      <category term="translation" scheme="http://blog.dongderu.net/tags/translation/"/>
    
      <category term="DDD" scheme="http://blog.dongderu.net/tags/DDD/"/>
    
      <category term="CQRS" scheme="http://blog.dongderu.net/tags/CQRS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 介绍</title>
    <link href="http://blog.dongderu.net/2012/10/19/angularjs-introduction/"/>
    <id>http://blog.dongderu.net/2012/10/19/angularjs-introduction/</id>
    <published>2012-10-19T06:30:00.000Z</published>
    <updated>2016-11-15T08:45:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>转载请注明出处 <a href="http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/">http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究跨浏览器跨平台app方案时找到了<a href="http://angularjs.org/" target="_blank" rel="external">Angular JS</a>，他是Google出品的JS框架。我粗略地看了一下它的介绍，突然发现，这不就是我要找的东西吗？这样的好东西可千万不能埋没了，得让它发扬光大，我就以这篇文章作为开始，围绕着angularjs的官方文档做一个系列的研究。</p>
<p><img src="https://ooo.0o0.ooo/2016/09/07/57cfcfd8871a1.jpg" alt=""></p>
<p>首先我们看到了它的一句广告语“HTML enhanced for web app”我对这句话的理解是“让HTML对你的web app作最给力的支撑”，看着是不是觉得很唬人？光靠HTML难道能通吃一切吗？它可没说大话哦，让我们继续看下去。</p>
<h2 id="为什么要选择AngularJS？"><a href="#为什么要选择AngularJS？" class="headerlink" title="为什么要选择AngularJS？"></a>为什么要选择AngularJS？</h2><p>HTML是一个很好的静态解释性语言，但是当你对其添加越来越多的动态响应后，HTML语言就会变得越来越不清晰，难以维护，AngularJS可以让你对现有的HTML词汇定义进行扩展（XHTML?HTML5?)，这样一来你的app就会变得非常易读而又富有表现力，同时也能加快你的开发效率。</p>
<h3 id="与其他JS框架的不同之处"><a href="#与其他JS框架的不同之处" class="headerlink" title="与其他JS框架的不同之处"></a>与其他JS框架的不同之处</h3><p>其他的JS框架通过将HTML, CSS, Javascript或者前2者与JS结合的内容进行抽象或者通过命令方式来操作DOM来弥补HTML的不足。不过这二者都没有解决HTML不是为了动态视图而设计的这一根本命题。</p>
<h3 id="扩展能力"><a href="#扩展能力" class="headerlink" title="扩展能力"></a>扩展能力</h3><p>AngularJS是一套非常适合组建你自己的应用的工具集。你可以随意对其功能进行扩展或者与其他库结合使用。其中每一个功能你都可以自定义或者将其替换以满足你的开发过程和需求。你可以通过阅读文档找到该问题的答案。</p>
<h3 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h3><p><img src="https://ooo.0o0.ooo/2016/09/07/57cfcfd86f591.jpg" alt=""></p>
<p>在name文本框内输入文字竟会同时显示在下方的Label区域内。我们来看一下实现该功能的代码：</p>
<p><em>index.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"yourName"</span> <span class="attr">placeholder</span>=<span class="string">"Enter a name here"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;yourName&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们先来做一些注释：</p>
<blockquote>
<p><code>ng-app</code>: 告诉AngularJS在页面上激活的位置，在本例中意味着全文件有效。</p>
<p><code>angular.min.js</code>: 加载AngularJS<br> ng-model: 将form和model建立关系并绑定。这意味着你对该控件内的任何修改都会对model内的数据作实时更新，相对的，model内数据的变更也会改变控件的显示。</p>
<p><code></code>: 是一种在HTML页面上制定绑定显示位置的申明方式，AngularJS会在“yourname”值变更的同时自动替换该处的文本。</p>
</blockquote>
<p>让我们动手试一试？<a href="http://jsfiddle.net/9QFwu/" target="_blank" rel="external">点我玩一下</a></p>
<h2 id="添加一些控制功能"><a href="#添加一些控制功能" class="headerlink" title="添加一些控制功能"></a>添加一些控制功能</h2><p>先穿插一点背景知识和特性：</p>
<blockquote>
<p>Data Binding: Data-binding是一种在model数据变更时自动更新显示的一种方式，反之亦然。这个功能十分方便，因为他可以让你省去许多对DOM的操作。</p>
<p>Controller: controller定义了DOM背后的行为。AngularJS可以让你用一种间接的高可读性，非公式化的表现方式来更新DOM，以及注册回调方法(callbacks)，或者监听model的变化。</p>
<p>朴实的JS: 和其他JS框架不同，你无需去继承一个专门的类型，用专门的访问器包裹你的model。只需要传统的、朴素的Javascript就好了。这将是你的程序更容易测试，维护，重用，而且从公式化中得到解放。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2016/09/07/57cfcfd870296.jpg" alt=""></p>
<p>一个经典的Todo List的实现，来看代码：</p>
<p><em>index.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"todo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"todo.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"TodoCtrl"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;remaining()&#125;&#125; of &#123;&#123;todos.length&#125;&#125; remaining<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      [ <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">ng-click</span>=<span class="string">"archive()"</span>&gt;</span>archive<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ]</div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"unstyled"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.done"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"done-&#123;&#123;todo.done&#125;&#125;"</span>&gt;</span>&#123;&#123;todo.text&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">ng-submit</span>=<span class="string">"addTodo()"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"todoText"</span>  <span class="attr">size</span>=<span class="string">"30"</span></span></div><div class="line">               <span class="attr">placeholder</span>=<span class="string">"add new todo here"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"add"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>todo.js</code>: 该文件内存放了所有控制方法。</p>
<p><code>ng-controller</code>: 在这个元素内部的行为都将交由<code>todo.js</code>内的<code>TodoCtrl</code>类进行管理。</p>
<p><code>ng-click</code>: 用定义的方式制定调用Controller中的行为，而不是通过注册event-handlers。在本例中点击链接后将调用archive() 方法。</p>
<p><code>ng-repeat</code>: ng-repeat用来显示一个集合，在本例中，针对每一个在todos里的对象，AngularJS都会创建一个<code>&lt;li&gt;</code>副本。当新的对象加入到todos中时，它也会自动追加<code>&lt;li&gt;</code>项，反之亦然。这是反映AngularJS指令灵活度特性的其中之一。</p>
<p><code>ng-submit</code>: 拦截表单提交事件，并用“addTodo()”方法取代，在该方法内会读取“todoText”属性并且将其插入到todos数组内。</p>
</blockquote>
<p><em>todo.js</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoCtrl</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.todos = [</div><div class="line">    &#123;<span class="attr">text</span>:<span class="string">'learn angular'</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;,</div><div class="line">    &#123;<span class="attr">text</span>:<span class="string">'build an angular app'</span>, <span class="attr">done</span>:<span class="literal">false</span>&#125;];</div><div class="line"> </div><div class="line">  $scope.addTodo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.todos.push(&#123;<span class="attr">text</span>:$scope.todoText, <span class="attr">done</span>:<span class="literal">false</span>&#125;);</div><div class="line">    $scope.todoText = <span class="string">''</span>;</div><div class="line">  &#125;;</div><div class="line"> </div><div class="line">  $scope.remaining = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">    angular.forEach($scope.todos, <span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</div><div class="line">      count += todo.done ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">  &#125;;</div><div class="line"> </div><div class="line">  $scope.archive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oldTodos = $scope.todos;</div><div class="line">    $scope.todos = [];</div><div class="line">    angular.forEach(oldTodos, <span class="function"><span class="keyword">function</span>(<span class="params">todo</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!todo.done) $scope.todos.push(todo);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>TodoCtrl</code>: Controller是页面背后的控制代码，你可以清楚地看到应用的行为，因为其中没有任何Dom操作，或者框架独有的格式，只有简单的，非常易读的JS。</p>
<p><code>$scope</code>: $scope内包含了你的model数据。它将页面和控制器粘合在了一起。$scope仅仅是能被注入到控制器的服务的其中之一。</p>
<p><code>todos</code>: 在本例中在初始化model时创建了2个todo项，请注意你只需简单地分配你的model到$scope上，AngularJS就会自动帮你将数据显示在页面上。而这个model数据就是普通的，传统的js对象，不用费力的把它包在proxy里，或者通过特定的setter方法去访问。</p>
<p><code>todoText</code>: 由于数据的双向绑定，model内的数据永远是最新的。这意味着我们可以简单地读取用户的输入，而不需要再去注册callbacks，事件监听器，或者使用框架提供的API。</p>
</blockquote>
<p><em>todo.css</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.done-true</span> &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: line-through;</div><div class="line">  <span class="attribute">color</span>: grey;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>.done-true</code>: 为完成的项添加打勾的样式。</p>
</blockquote>
<p><a href="http://jsfiddle.net/WbRfC/" target="_blank" rel="external">再玩一下？</a></p>
<h2 id="连接后端"><a href="#连接后端" class="headerlink" title="连接后端"></a>连接后端</h2><p>背景知识和特性:</p>
<blockquote>
<p>Deep Linking: 深度的链接反映了用户在app内的所在位置，当用户想要收藏当前页面或者将链接通过邮件发送出去时就显得十分有用。传统的web应用没有这个问题，但是AJAX应用天生就不支持这个功能。AngularJS将深度链接和类似桌面应用的开发的优点结合在了一起。</p>
<p>表单验证: 客户端验证是用户体验中的重要部分。AngularJS让你无需编写任何JS代码就能制定表单的验证条件。写更少的代码，开发地更快更好。</p>
<p>与服务端通信: AngularJS提供了建立于<a href="http://baike.baidu.com/view/1105115.htm" target="_blank" rel="external">XHR</a>之上的服务，这样戏剧化地简化了你的代码。我们封装了XHR并且提供了异常处理和成功允诺。而这个允诺进一步地简化了原先你代码内处理异步返回结果的部分。它能让同步地分配属性但是其实执行的是异步的操作。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2016/09/07/57cfcfd87f11c.jpg" alt=""></p>
<p>SUID操作示例，来看代码:</p>
<p><em>index.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"project"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/angularjs/1.0.2/angular-resource.min.js"</span>&gt;</span><span class="undefined"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"project.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mongolab.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>JavaScript Projects<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>ng-app=&quot;project&quot;</code>: ng-app在本页面区域内激活了project模块。这样定义意味着可以在页面内存在调用多个模块。</p>
<p><code>angular-resource.min.js</code>: 加载AngularJS Resource模块。</p>
<p><code>project.js</code>: 页面的Controller，其中定了了页面的行为。</p>
<p><code>mongolab.js</code>: AngularJS将该应用与<a href="http://mongolab.com连接的模块，用来作数据持久化。" target="_blank" rel="external">http://mongolab.com连接的模块，用来作数据持久化。</a></p>
<p>ng-view: 定义了ng-view以后，我们就可以把这个div作为一个partial页面或者模板的容器，而在它范围之外页面部分将保持静态。在这个例子中我们将使用这个容器，让它在现实列表和添加、删除表单模板之间切换。</p>
</blockquote>
<p><em>project.js</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'project'</span>, [<span class="string">'mongolab'</span>]).</div><div class="line">  config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;</div><div class="line">    $routeProvider.</div><div class="line">      when(<span class="string">'/'</span>, &#123;<span class="attr">controller</span>:ListCtrl, <span class="attr">templateUrl</span>:<span class="string">'list.html'</span>&#125;).</div><div class="line">      when(<span class="string">'/edit/:projectId'</span>, &#123;<span class="attr">controller</span>:EditCtrl, <span class="attr">templateUrl</span>:<span class="string">'detail.html'</span>&#125;).</div><div class="line">      when(<span class="string">'/new'</span>, &#123;<span class="attr">controller</span>:CreateCtrl, <span class="attr">templateUrl</span>:<span class="string">'detail.html'</span>&#125;).</div><div class="line">      otherwise(&#123;<span class="attr">redirectTo</span>:<span class="string">'/'</span>&#125;);</div><div class="line">  &#125;);</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListCtrl</span>(<span class="params">$scope, Project</span>) </span>&#123;</div><div class="line">  $scope.projects = Project.query();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateCtrl</span>(<span class="params">$scope, $location, Project</span>) </span>&#123;</div><div class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Project.save($scope.project, <span class="function"><span class="keyword">function</span>(<span class="params">project</span>) </span>&#123;</div><div class="line">      $location.path(<span class="string">'/edit/'</span> + project._id.$oid);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">EditCtrl</span>(<span class="params">$scope, $location, $routeParams, Project</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"> </div><div class="line">  Project.get(&#123;<span class="attr">id</span>: $routeParams.projectId&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">project</span>) </span>&#123;</div><div class="line">    self.original = project;</div><div class="line">    $scope.project = <span class="keyword">new</span> Project(self.original);</div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  $scope.isClean = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> angular.equals(self.original, $scope.project);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  $scope.destroy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    self.original.destroy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $location.path(<span class="string">'/list'</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"> </div><div class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.project.update(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      $location.path(<span class="string">'/'</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>project</code>: 这样就直接定义了project模块。通过使用模块，你可以配置现有的服务，定义新的服务，指令，过滤器等等。在这里，我们将设置映射URL和部件的路由。AngularJS负责监控浏览器，一旦URL有变动将自动更新部件内容。</p>
<p><code>mongolab</code>: 一个模块可以依赖于其他模块，这里，project依赖于mongolab以处理本应用的持久化事务。</p>
<p><code>config</code>: 通过<code>config()</code>可以配置已存在的服务，这里，我们将配置<code>$routeProvider</code>来处理URL和部件的映射关系。</p>
<p><code>when</code>: 当URL为<code>/</code>时，程序会在页面上加载<code>list.html</code>并关联<code>ListCtrl</code>控制器。你可以直观的通过查阅路由定义来了解该应用的结构。</p>
<p><code>/edit/:projectId</code>: 你一定在路由定义里发现有一个<code>:</code>，你可以通过使用冒号来传参，让Controller接受，现在 <code>EditCtrl</code> 可以通过查询<code>projectId</code>属性来定位要编辑的记录了。</p>
<p><code>otherwise</code>: 这条路由用来定义不满足所有情况时显示的内容，类似switch的default。</p>
<p><code>Project</code>: 这是一个用来持久化以及获取数据的类。他已经在<code>mongolab.js</code>中定义，并自定注入到了controller中。他的目的是使服务器的交互抽象化，让我们腾出更多精力专注于控制行为而不是处理复杂的服务器交互。</p>
<p><code>query</code>: 该方法会从服务器请求Project类的集合。注意尽管这是一个异步的调用，但是我们就像同步且没有回调函数的那样使用，这实在太酷了！事实上这里<code>query</code>返回的是一种叫做<code>promise</code>的东东。一旦最后从服务器得到了返回数据，兑现了 <code>promise</code>, AngularJS的数据绑定功能将自动地在任何我们使用该方法的地方更新显示。</p>
<p><code>$location</code>: 你可以通过调用此服务读取浏览器地址。</p>
<p><code>save</code>: 当用户点击save按钮后将调用此方法。</p>
<p><code>path</code>: 使用此方法可以更改应用的当前URL，URL的变动也会自动地激活路由服务，解释并显示新的内容，在这里，会显示<code>/edit/</code>内容。</p>
<p><code>$routeParams</code>: 这里我们请求AngularJS为我们注入<code>$routeParams</code>服务，通过使用它，我们可以读取在路由里定义的参数。</p>
<p><code>projectId</code>: 这里将URL中的 projectId 读取出来。有了它可以让Controller支持deep-linking。</p>
<p><code>original</code>: 我们先把原始的Project保存起来，以便可以发现用户是否有对其进行更改。</p>
<p><code>isClean</code>: 检查用户是否通过表单更改了信息，我们在这里通过此功能控制是否启用save按钮。</p>
<p><code>destroy</code>: 当用户点击了delete按钮后调用该方法。</p>
</blockquote>
<p><em>list.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"search-query"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/new"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-plus-sign"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"project in projects | filter:search | orderBy:'name'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;project.site&#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>&#123;&#123;project.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;project.description&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/edit/&#123;&#123;project._id.$oid&#125;&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>ng-model</code>: 将输入框与search属性绑定。该属性用来过滤project包含用户输入的关键字的数据。</p>
<p><code>#/new</code>: 指向<code>/new</code>路由的链接，该路由已在<code>project.js</code>里定义。注意我们一直遵从web的准则。为一个链接注册回调实在很不象话，我们只是简单地将它指向一个新的URL。这将会自动更新浏览器的历史，激活deep-linking。但是和普通的服务器客户端两头跑的应用不同，这里的跳转时间将会立刻在浏览器上得到反馈。</p>
<p><code>ng-repeat</code>: 通过使用它来遍历集合。在这里，为<code>projects</code>里的每一个project，AngularJS都会创建一个新的<code>&lt;tr&gt;</code>节点。</p>
<p><code>filter</code>: 它通过调用<code>search</code>来返回在<code>projects</code>中符合条件的项。当你在搜索框里输入关键字后，<code>filter</code>将会将列表的显示范围进一步缩小以满足条件，然后<code>ng-repeat</code>会在table里添加或删除不符和条件的项目。</p>
<p><code>orderBy</code>: 返回根据<code>name</code>排序的project列表。</p>
<p><code>#/edit/</code>: 创建独有的编辑链接，通过在URL里内嵌project id，这样一来就可以实现deep-linking，你可以通过浏览器返回上一步，也可以通过URL调用<code>EditCtrl</code>来编辑项。</p>
</blockquote>
<p><em>detail.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"myForm"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;error: myForm.name.$invalid&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">ng-model</span>=<span class="string">"project.name"</span> <span class="attr">required</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"myForm.name.$error.required"</span> <span class="attr">class</span>=<span class="string">"help-inline"</span>&gt;</span></div><div class="line">        Required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;error: myForm.site.$invalid&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Website<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">ng-model</span>=<span class="string">"project.site"</span> <span class="attr">required</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"myForm.site.$error.required"</span> <span class="attr">class</span>=<span class="string">"help-inline"</span>&gt;</span></div><div class="line">        Required<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-show</span>=<span class="string">"myForm.site.$error.url"</span> <span class="attr">class</span>=<span class="string">"help-inline"</span>&gt;</span></div><div class="line">        Not a URL<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">ng-model</span>=<span class="string">"project.description"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"save()"</span> <span class="attr">ng-disabled</span>=<span class="string">"isClean() || myForm.$invalid"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"destroy()"</span></span></div><div class="line">          <span class="attr">ng-show</span>=<span class="string">"project._id"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;Delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>myForm</code>: 创建一个表单并为其命名，我们将会声明验证规则并处理输入错误和控制按钮操作。</p>
<p><code>ng-class</code>: 当<code>name</code>不正确时，为div添加一个<code>error</code>的CSS class。</p>
<p><code>required</code>: 当输入值为空值判定为错误。</p>
<p><code>ng-show</code>: 当myForm的name框required判定为错误时显示错误信息。</p>
<p><code>url</code>: 该类型会自动验证输入值的格式。</p>
<p><code>ng-disabled</code>: 当表单没有变动或者有错误时禁用’save’按钮</p>
</blockquote>
<p><em>mangolab.js</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This is a module for cloud persistance in mongolab - https://mongolab.com</span></div><div class="line">angular.module(<span class="string">'mongolab'</span>, [<span class="string">'ngResource'</span>]).</div><div class="line">    factory(<span class="string">'Project'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> Project = $resource(<span class="string">'https://api.mongolab.com/api/1/databases'</span> +</div><div class="line">          <span class="string">'/angularjs/collections/projects/:id'</span>,</div><div class="line">          &#123; <span class="attr">apiKey</span>: <span class="string">'4f847ad3e4b08a2eed5f3b54'</span> &#125;, &#123;</div><div class="line">            <span class="attr">update</span>: &#123; <span class="attr">method</span>: <span class="string">'PUT'</span> &#125;</div><div class="line">          &#125;</div><div class="line">      );</div><div class="line"> </div><div class="line">      Project.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Project.update(&#123;<span class="attr">id</span>: <span class="keyword">this</span>._id.$oid&#125;,</div><div class="line">            angular.extend(&#123;&#125;, <span class="keyword">this</span>, &#123;<span class="attr">_id</span>:<span class="literal">undefined</span>&#125;), cb);</div><div class="line">      &#125;;</div><div class="line"> </div><div class="line">      Project.prototype.destroy = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> Project.remove(&#123;<span class="attr">id</span>: <span class="keyword">this</span>._id.$oid&#125;, cb);</div><div class="line">      &#125;;</div><div class="line"> </div><div class="line">      <span class="keyword">return</span> Project;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>ngResource</code>: AngularJS的<code>ngResource</code>模块提供了一个面向RESTFul服务的通用接口。</p>
<p><code>factory</code>: 通过调用<code>ngResource</code>模块的该方法来定义新的服务。在这里定义的任何服务都会在你调用的任何地方被自动注入。</p>
<p><code>Project</code>: 在这里是为了Project类定义一个服务，该类负责每个<code>project</code>的数据装载，并且带有读写数据的方法。</p>
<p><code>$resource</code>: 该服务专门用来创建资源类。每一个资源类预定义配有<code>query()</code>，<code>get()</code>，<code>save()</code>和<code>remove()</code>方法。这些方法作为与持久化服务交互的API。此外，资源类还可以根据你的应用的需要进行扩展。</p>
<p><code>apiKey</code>: 向<code>mangolab</code>数据存储引擎请求时必要的参数，伴随所有请求一并传入。</p>
<p><code>update</code>: 在资源类上定义update方法，其将会使用HTTP put方法作为请求。</p>
<p><code>prototype</code>: 这里我们将扩展资源类的方法来与持久化引擎作交互。</p>
</blockquote>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p>背景知识和特性:</p>
<p>指令 (Directives): 指令是AngularJS独有的功能，而且他非常强大，Directive能让你在你的应用中创造独有的HTML语句。</p>
<p>组件可重用: 使用指令的目的的其中之一是为了重用。可以将一些复杂的DOM结构，css语句，行为等封装成一个组件，从而让你腾出更多精力专注于应用的表现方式上。</p>
<p>本地化: 本地化是一个严谨的应用其中的一个重要组成部分。Angular中的local aware filters和stemming directives提供了现成的功能模块从而使你的应用能解决大多数本地化的问题。</p>
<p><img src="https://ooo.0o0.ooo/2016/09/07/57cfcfd86e3ed.jpg" alt=""></p>
<p>来看代码:</p>
<p><em>index.html</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"components"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"beers.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tabs</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">pane</span> <span class="attr">title</span>=<span class="string">"Localization"</span>&gt;</span></div><div class="line">        Date: &#123;&#123; '2012-04-01' | date:'fullDate' &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        Currency: &#123;&#123; 123456 | currency &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        Number: &#123;&#123; 98765.4321 | number &#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">pane</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">pane</span> <span class="attr">title</span>=<span class="string">"Pluralization"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"BeerCounter"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"beerCount in beers"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ng-pluralize</span> <span class="attr">count</span>=<span class="string">"beerCount"</span> <span class="attr">when</span>=<span class="string">"beerForms"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-pluralize</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">pane</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tabs</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>components</code>: 直接在此页面范围内定义了components组件，该组件包含了<code>&lt;tabs&gt;</code>和<code>&lt;pane&gt;</code>这两个HTML扩展组件。</p>
<p><code>tabs</code>: 我们为HTML解释库添加了一个<code>tabs</code>组件，该组件将复杂的HTML标签的实现和结构抽象话，直接展现结果，这样增加了代码的可读性而且能够很方便地去重用。</p>
<p><code>pane</code>: 我们在这里又定义了一个名为<code>pane</code>的新组件，为每个标签加载面板。</p>
<p><code>title</code>: 自定义组件可以带参，在这里<code>title</code>表示为标签的显示抬头。</p>
<p><code>localization</code>: 作为一个示例演示AngularJS的本地化功能，日期、数字、和汇率的格式显示。</p>
<p><code>Pluralization</code>: 作为一个示例演示AngularJS的单复数显示功能，注意此功能会根据locale的不同产生变化。</p>
<p><code>BeerCounter</code>: 我们使用名为<code>BeerCounter</code>的Controller来设置基于不同locale的显示规则。</p>
<p><code>ng-pluralize</code>: 该指令会根据每个local显示正确的单复数格式。不是所有的语言都想英语那样，根据数量的不同，其他语言可能会有更复杂的复数表现形式。</p>
<p><code>count</code>: 绑定显示的阿拉伯数字。</p>
<p><code>when</code>: 绑定单复数的输出规则。</p>
</blockquote>
<p><em>components.js</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'components'</span>, []).</div><div class="line">  directive(<span class="string">'tabs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">      <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">scope</span>: &#123;&#125;,</div><div class="line">      <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $element</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> panes = $scope.panes = [];</div><div class="line"> </div><div class="line">        $scope.select = <span class="function"><span class="keyword">function</span>(<span class="params">pane</span>) </span>&#123;</div><div class="line">          angular.forEach(panes, <span class="function"><span class="keyword">function</span>(<span class="params">pane</span>) </span>&#123;</div><div class="line">            pane.selected = <span class="literal">false</span>;</div><div class="line">          &#125;);</div><div class="line">          pane.selected = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">this</span>.addPane = <span class="function"><span class="keyword">function</span>(<span class="params">pane</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (panes.length == <span class="number">0</span>) $scope.select(pane);</div><div class="line">          panes.push(pane);</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">template</span>:</div><div class="line">        <span class="string">'&lt;div class="tabbable"&gt;'</span> +</div><div class="line">          <span class="string">'&lt;ul class="nav nav-tabs"&gt;'</span> +</div><div class="line">            <span class="string">'&lt;li ng-repeat="pane in panes" ng-class="&#123;active:pane.selected&#125;"&gt;'</span>+</div><div class="line">              <span class="string">'&lt;a href="" ng-click="select(pane)"&gt;&#123;&#123;pane.title&#125;&#125;&lt;/a&gt;'</span> +</div><div class="line">            <span class="string">'&lt;/li&gt;'</span> +</div><div class="line">          <span class="string">'&lt;/ul&gt;'</span> +</div><div class="line">          <span class="string">'&lt;div class="tab-content" ng-transclude&gt;&lt;/div&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">      <span class="attr">replace</span>: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">  &#125;).</div><div class="line">  directive(<span class="string">'pane'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">require</span>: <span class="string">'^tabs'</span>,</div><div class="line">      <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">      <span class="attr">transclude</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">scope</span>: &#123; <span class="attr">title</span>: <span class="string">'@'</span> &#125;,</div><div class="line">      <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs, tabsCtrl</span>) </span>&#123;</div><div class="line">        tabsCtrl.addPane(scope);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">template</span>:</div><div class="line">        <span class="string">'&lt;div class="tab-pane" ng-class="&#123;active: selected&#125;" ng-transclude&gt;'</span> +</div><div class="line">        <span class="string">'&lt;/div&gt;'</span>,</div><div class="line">      <span class="attr">replace</span>: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>directive</code>: 通过调用该方法来定义新的HTML语义扩展。</p>
<p><code>tabs</code>: 定义了<code>tabs</code>扩展。</p>
<p><code>restrict</code>: 他规定了HTML组件的格式，在这里<code>&lt;tabs&gt;</code>必须是一个HTML元素。</p>
<p><code>transclude</code>: 定义了AngularJS进行自定义组件的转义后，原先定义的内容显示的位置，要实现这点还要结合<code>ng-transclude</code>指令（见下文）。</p>
<p><code>scope</code>: 我们定义的组件需要有一个私有的边界以保证其内部的显示内容不被外界不小心更改。如果你确实需要这么做，你可以定义input/output属性，可参考下文中的<code>&lt;pane&gt;</code>组件用法。</p>
<p><code>controller</code>: 就像整体应用一样，组件同样也可以指定一个controller，来负责解释该组件的行为。</p>
<p><code>$scope</code>: 当前组件的边界。</p>
<p><code>$element</code>: 当前组件的DOM元素。</p>
<p><code>select</code>: 发布一个名为<code>select</code>的方法来负责转换标签时的显示。</p>
<p><code>addPane</code>: 通常组件需要相互协作来达到一个整体效果，在这个例子里，<code>pane</code>组件会通过<code>addPane</code>方法来讲自己注册到<code>&lt;tabs&gt;</code>容器中。</p>
<p><code>template</code>: 顾名思义，他就是用来存放替换自定义组件的HTML代码存放点。注意，里面也同样可以包含其他的指令。</p>
<p><code>active</code>: 我们通过设置<code>active</code>这么一个CSS样式来实现激活标签的效果。</p>
<p><code>ng-click</code>: 通过点击选中标签。</p>
<p><code>ng-transclude</code>: 标记原有<code>&lt;tabs&gt;</code>元素存放的位置。</p>
<p><code>replace</code>: 告诉AngularJS替换原有的<code>&lt;tabs&gt;</code>元素，而不是在它后面追加<code>template</code>里的内容。</p>
<p><code>require</code>: 指定了<code>&lt;pane&gt;</code>组件必须包含在<code>&lt;tabs&gt;</code>组件内。这样也同样可以让<code>&lt;pane&gt;</code>组件访问<code>&lt;tabs&gt;</code>组件的controller的方法，在这里，就是<code>addPane</code>这个方法了。</p>
<p><code>tabsCtrl</code>: 我们已经通过定义<code>require</code>在指定<code>&lt;tabs&gt;</code>作为容器，我们就可以只用它的controller示例了。</p>
</blockquote>
<p><em>beers.js</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BeerCounter</span>(<span class="params">$scope, $locale</span>) </span>&#123;</div><div class="line">  $scope.beers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">  <span class="keyword">if</span> ($locale.id == <span class="string">'en-us'</span>) &#123;</div><div class="line">    $scope.beerForms = &#123;</div><div class="line">      <span class="number">0</span>: <span class="string">'no beers'</span>,</div><div class="line">      <span class="attr">one</span>: <span class="string">'&#123;&#125; beer'</span>,</div><div class="line">      <span class="attr">other</span>: <span class="string">'&#123;&#125; beers'</span></div><div class="line">    &#125;;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $scope.beerForms = &#123;</div><div class="line">      <span class="number">0</span>: <span class="string">'žiadne pivo'</span>,</div><div class="line">      <span class="attr">one</span>: <span class="string">'&#123;&#125; pivo'</span>,</div><div class="line">      <span class="attr">few</span>: <span class="string">'&#123;&#125; pivá'</span>,</div><div class="line">      <span class="attr">other</span>: <span class="string">'&#123;&#125; pív'</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释：</p>
<blockquote>
<p><code>$locale</code>: 该服务包含了当前locale的元数据。AngularJS有很多locale模块对应各种不同语言的locale。</p>
<p><code>beers</code>: 设置beers的计数数组。我们将迭代这个数组来得到每项的值。</p>
<p><code>id</code>: 为每个不同的locale建立不同的复数形式。在实际项目中，除了要加载locale以外，还要处理翻译的问题。</p>
<p><code>beerForms</code>: 基于英语的复数形式。</p>
</blockquote>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>好了终于把欠的债补完了，本文是根据<a href="http://angularjs.org/" target="_blank" rel="external">AngualarJS 官网</a>首页的示例逐条翻译的，可以进行参考对照。如果你有兴趣了解更多，官网上有详细的文档，视频，和示例。详细你一定能收获到不少东西的。另外，由于个人能力有限，如果有错误，敬请包含，欢迎留言指出问题所在，我会及时进行修改的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载请注明出处 &lt;a href=&quot;http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Introduction/&quot;&gt;http://blog.dongderu.net/2013/05/22/2013-5-22-CQRS-Int
    
    </summary>
    
      <category term="Documentation" scheme="http://blog.dongderu.net/categories/Documentation/"/>
    
    
      <category term="angularjs" scheme="http://blog.dongderu.net/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://blog.dongderu.net/tags/javascript/"/>
    
      <category term="frontend" scheme="http://blog.dongderu.net/tags/frontend/"/>
    
      <category term="translation" scheme="http://blog.dongderu.net/tags/translation/"/>
    
  </entry>
  
</feed>
